/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.component.gui;

import java.awt.BorderLayout;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.JToolBar;
import org.exbin.framework.action.ActionModule;
import org.exbin.framework.action.api.clipboard.EmptyTextClipboardSupport;
import org.exbin.framework.operation.undo.OperationUndoModule;
import org.exbin.framework.operation.undo.api.UndoActions;
import org.exbin.framework.operation.undo.api.EmptyUndoRedo;
import org.exbin.framework.action.api.clipboard.ClipboardActionsApi;
import org.exbin.framework.utils.UtilsModule;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.operation.undo.api.UndoRedoState;
import org.exbin.framework.action.api.clipboard.TextClipboardController;

/**
 * Panel with edit toolbar.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class ToolBarEditorPanel extends javax.swing.JPanel {

    private UndoRedoState undoRedo = null;
    private JToolBar toolBar = null;

    public ToolBarEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            OperationUndoModule operationUndoModule = new OperationUndoModule();
            testApplication.addModule(OperationUndoModule.MODULE_ID, operationUndoModule);
            ActionModule actionModule = new ActionModule();
            testApplication.addModule(ActionModule.MODULE_ID, actionModule);

            ToolBarEditorPanel toolBarEditorPanel = new ToolBarEditorPanel();
            UndoRedoState undoRedoHandler = new EmptyUndoRedo();
            toolBarEditorPanel.setUndoHandler(undoRedoHandler, operationUndoModule.createUndoActions());
            TextClipboardController clipboardActionsHandler = new EmptyTextClipboardSupport();
            toolBarEditorPanel.setClipboardHandler(clipboardActionsHandler, actionModule.getClipboardActions());
            WindowUtils.invokeWindow(toolBarEditorPanel);
        });
    }

    public void setUndoHandler(UndoRedoState undoRedo, UndoActions undoActions) {
        this.undoRedo = undoRedo;
        initToolBar();
        toolBar.add(undoActions.createUndoAction());
        toolBar.add(undoActions.createRedoAction());
        // TODO undoActions.updateUndoActions();
    }

    public void setClipboardHandler(TextClipboardController clipboardController, ClipboardActionsApi clipboardActions) {
        initToolBar();
        if (undoRedo != null) {
            toolBar.addSeparator();
        }
        toolBar.add(clipboardActions.createCutAction());
        toolBar.add(clipboardActions.createCopyAction());
        toolBar.add(clipboardActions.createPasteAction());
        // TODO clipboardActions.updateClipboardActions();
    }

    private void initToolBar() {
        if (toolBar == null) {
            toolBar = new JToolBar();
            toolBar.setFloatable(false);
            add(toolBar, BorderLayout.NORTH);
        }
    }
}
