/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.editor.wave.options.panel;

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.framework.api.Preferences;
import org.exbin.framework.editor.wave.preferences.WaveColorParameters;
import org.exbin.framework.gui.utils.LanguageUtils;
import org.exbin.framework.gui.options.api.OptionsCapable;
import org.exbin.framework.gui.options.api.OptionsModifiedListener;
import org.exbin.framework.gui.utils.WindowUtils;
import org.exbin.framework.editor.wave.service.WaveColorService;

/**
 * Wave editor color selection panel.
 *
 * @version 0.2.1 2019/07/13
 * @author ExBin Project (http://exbin.org)
 */
@ParametersAreNonnullByDefault
public class WaveColorOptionsPanel extends javax.swing.JPanel implements OptionsCapable {

    private OptionsModifiedListener optionsModifiedListener;
    private final ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(WaveColorOptionsPanel.class);
    private final WaveColorService colorPanelApi;
    private final WaveColorPanel colorPanel;

    public WaveColorOptionsPanel(WaveColorService colorPanelApi) {
        this.colorPanelApi = colorPanelApi;
        initComponents();

        colorPanel = new WaveColorPanel(colorPanelApi);
        colorPanel.setEnabled(false);
        customColorsPanel.add(colorPanel, BorderLayout.CENTER);
    }

    @Nonnull
    @Override
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorChooser = new javax.swing.JColorChooser();
        customColorsPanel = new javax.swing.JPanel();
        defaultColorCheckBox = new javax.swing.JCheckBox();

        colorChooser.setName("colorChooser"); // NOI18N

        setName("Form"); // NOI18N

        customColorsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("customColorsPanel.border.title"))); // NOI18N
        customColorsPanel.setName("customColorsPanel"); // NOI18N
        customColorsPanel.setLayout(new java.awt.BorderLayout());

        defaultColorCheckBox.setSelected(true);
        defaultColorCheckBox.setText(resourceBundle.getString("defaultColorCheckBox.text")); // NOI18N
        defaultColorCheckBox.setName("defaultColorCheckBox"); // NOI18N
        defaultColorCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                defaultColorCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(customColorsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(defaultColorCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultColorCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customColorsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void defaultColorCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_defaultColorCheckBoxItemStateChanged
        boolean checked = evt.getStateChange() != ItemEvent.SELECTED;
        colorPanel.setEnabled(checked);
        setModified();
    }//GEN-LAST:event_defaultColorCheckBoxItemStateChanged

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new WaveColorOptionsPanel(null));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JPanel customColorsPanel;
    private javax.swing.JCheckBox defaultColorCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void loadFromPreferences(Preferences preferences) {
        WaveColorParameters waveColorParameters = new WaveColorParameters(preferences);
        boolean useDefaultColors = waveColorParameters.useDefaultColors();
        defaultColorCheckBox.setSelected(useDefaultColors);
        colorPanel.setEnabled(!useDefaultColors);
        colorPanel.loadFromPreferences(preferences);
    }

    @Override
    public void saveToPreferences(Preferences preferences) {
        WaveColorParameters waveColorParameters = new WaveColorParameters(preferences);
        waveColorParameters.setUseDefaultColors(defaultColorCheckBox.isSelected());
        colorPanel.saveToPreferences(preferences);
    }

    @Override
    public void applyPreferencesChanges() {
        if (defaultColorCheckBox.isSelected()) {
            colorPanelApi.setCurrentWaveColors(colorPanelApi.getCurrentWaveColors());
        } else {
            colorPanel.applyPreferencesChanges();
        }
    }

    private void setModified() {
        if (optionsModifiedListener != null) {
            optionsModifiedListener.wasModified();
        }
    }

    @Override
    public void setOptionsModifiedListener(OptionsModifiedListener listener) {
        optionsModifiedListener = listener;
        colorPanel.setOptionsModifiedListener(listener);
    }
}
