/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.text.gui;

import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.text.Document;
import org.exbin.framework.App;
import org.exbin.framework.editor.text.TextEditor;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.file.api.FileHandler;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;

/**
 * Text file properties panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class TextPropertiesPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(TextPropertiesPanel.class);

    public TextPropertiesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileNameLabel = new javax.swing.JLabel();
        fileNameTextField = new javax.swing.JTextField();
        documentSizePanel = new javax.swing.JPanel();
        linesCountLabel = new javax.swing.JLabel();
        linesCountTextField = new javax.swing.JTextField();
        charCountLabel = new javax.swing.JLabel();
        charCountTextField = new javax.swing.JTextField();
        fileSizeLabel = new javax.swing.JLabel();
        fileSizeTextField = new javax.swing.JTextField();
        wordsCountLabel = new javax.swing.JLabel();
        wordsCountTextField = new javax.swing.JTextField();

        fileNameLabel.setText(resourceBundle.getString("fileNameLabel.text")); // NOI18N

        fileNameTextField.setEditable(false);

        documentSizePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("documentSizePanel.border.title"))); // NOI18N

        linesCountLabel.setText(resourceBundle.getString("linesCountLabel.text")); // NOI18N

        linesCountTextField.setEditable(false);

        charCountLabel.setText(resourceBundle.getString("charCountLabel.text")); // NOI18N

        charCountTextField.setEditable(false);

        fileSizeLabel.setText(resourceBundle.getString("fileSizeLabel.text")); // NOI18N

        fileSizeTextField.setEditable(false);

        wordsCountLabel.setText(resourceBundle.getString("wordsCountLabel.text")); // NOI18N

        wordsCountTextField.setEditable(false);

        javax.swing.GroupLayout documentSizePanelLayout = new javax.swing.GroupLayout(documentSizePanel);
        documentSizePanel.setLayout(documentSizePanelLayout);
        documentSizePanelLayout.setHorizontalGroup(
            documentSizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(documentSizePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(documentSizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linesCountLabel)
                    .addComponent(charCountLabel)
                    .addComponent(fileSizeLabel)
                    .addComponent(wordsCountLabel)
                    .addComponent(charCountTextField)
                    .addComponent(fileSizeTextField)
                    .addComponent(wordsCountTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(linesCountTextField))
                .addContainerGap())
        );
        documentSizePanelLayout.setVerticalGroup(
            documentSizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(documentSizePanelLayout.createSequentialGroup()
                .addComponent(linesCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(linesCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(charCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(charCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wordsCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wordsCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(documentSizePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(fileNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 305, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(fileNameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(documentSizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel charCountLabel;
    private javax.swing.JTextField charCountTextField;
    private javax.swing.JPanel documentSizePanel;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JLabel fileSizeLabel;
    private javax.swing.JTextField fileSizeTextField;
    private javax.swing.JLabel linesCountLabel;
    private javax.swing.JTextField linesCountTextField;
    private javax.swing.JLabel wordsCountLabel;
    private javax.swing.JTextField wordsCountTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new TextPropertiesPanel());
        });
    }

    public void setDocument(TextEditor textEditor) {
        Optional<FileHandler> activeFile = textEditor.getActiveFile();
        if (!activeFile.isPresent()) {
            throw new IllegalStateException();
        }

        FileHandler fileHandler = activeFile.get();
        Optional<URI> fileUri = fileHandler.getFileUri();
        fileNameTextField.setText(fileUri.isPresent() ? fileUri.get().toString() : "");
        TextPanel textPanel = (TextPanel) fileHandler.getComponent();
        Document document = textPanel.getDocument();
        linesCountTextField.setText(Integer.toString(textPanel.getLineCount()));
        charCountTextField.setText(Integer.toString(document.getLength()));
        CharBuffer buffer = CharBuffer.wrap(new StringBuffer(textPanel.getText()));

        try {
            CharsetEncoder encoder = Charset.defaultCharset().newEncoder();
            ByteBuffer result = encoder.encode(buffer);
            int length = 0;
            while (result.hasRemaining()) {
                result.get();
                length++;
            }
            fileSizeTextField.setText(Integer.toString(length));
        } catch (UnsupportedOperationException | CharacterCodingException ex) {
            Logger.getLogger(TextPropertiesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }
}
