/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.text.options.gui;

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import org.exbin.framework.editor.text.options.impl.TextColorOptionsImpl;
import org.exbin.framework.gui.utils.LanguageUtils;
import org.exbin.framework.gui.utils.WindowUtils;
import org.exbin.framework.gui.options.api.OptionsCapable;
import org.exbin.framework.gui.options.api.OptionsModifiedListener;
import org.exbin.framework.editor.text.service.TextColorService;

/**
 * Text color options panel.
 *
 * @version 0.2.1 2019/07/20
 * @author ExBin Project (http://exbin.org)
 */
public class TextColorOptionsPanel extends javax.swing.JPanel implements OptionsCapable<TextColorOptionsImpl> {

    private OptionsModifiedListener optionsModifiedListener;
    private final ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(TextColorOptionsPanel.class);
    private TextColorService textColorService;
    private final TextColorPanel colorPanel;

    public TextColorOptionsPanel() {
        colorPanel = new TextColorPanel();
        initComponents();
        init();
    }

    private void init() {
        colorPanel.setEnabled(false);
        super.add(colorPanel, BorderLayout.CENTER);
    }

    public void setTextColorService(TextColorService textColorService) {
        this.textColorService = textColorService;
        colorPanel.setTextColorService(textColorService);
    }

    @Nonnull
    @Override
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    @Override
    public void loadFromOptions(TextColorOptionsImpl options) {
        boolean defaultColor = options.isUseDefaultColors();
        defaultColorCheckBox.setSelected(defaultColor);
        colorPanel.setEnabled(!defaultColor);
        colorPanel.loadFromOptions(options);
    }

    @Override
    public void saveToOptions(TextColorOptionsImpl options) {
        options.setUseDefaultColors(defaultColorCheckBox.isSelected());
        colorPanel.saveToOptions(options);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser1 = new javax.swing.JColorChooser();
        defaultColorPanel = new javax.swing.JPanel();
        defaultColorCheckBox = new javax.swing.JCheckBox();

        jColorChooser1.setName("jColorChooser1"); // NOI18N

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        defaultColorPanel.setName("defaultColorPanel"); // NOI18N

        defaultColorCheckBox.setSelected(true);
        defaultColorCheckBox.setText(resourceBundle.getString("defaultColorCheckBox.text")); // NOI18N
        defaultColorCheckBox.setName("defaultColorCheckBox"); // NOI18N
        defaultColorCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                defaultColorCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout defaultColorPanelLayout = new javax.swing.GroupLayout(defaultColorPanel);
        defaultColorPanel.setLayout(defaultColorPanelLayout);
        defaultColorPanelLayout.setHorizontalGroup(
            defaultColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultColorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultColorCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        defaultColorPanelLayout.setVerticalGroup(
            defaultColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultColorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultColorCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(defaultColorPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void defaultColorCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_defaultColorCheckBoxItemStateChanged
        boolean checked = evt.getStateChange() != ItemEvent.SELECTED;
        colorPanel.setEnabled(checked);
        setModified(true);
    }//GEN-LAST:event_defaultColorCheckBoxItemStateChanged

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new TextColorOptionsPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox defaultColorCheckBox;
    private javax.swing.JPanel defaultColorPanel;
    private javax.swing.JColorChooser jColorChooser1;
    // End of variables declaration//GEN-END:variables

    private void setModified(boolean b) {
        if (optionsModifiedListener != null) {
            optionsModifiedListener.wasModified();
        }
    }

    @Override
    public void setOptionsModifiedListener(OptionsModifiedListener listener) {
        optionsModifiedListener = listener;
        colorPanel.setOptionsModifiedListener(listener);
    }
}
