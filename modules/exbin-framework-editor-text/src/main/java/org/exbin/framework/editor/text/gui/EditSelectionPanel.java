/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.text.gui;

import java.text.ParseException;
import org.exbin.framework.editor.text.RelativePositionMode;
import java.util.Optional;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.SpinnerNumberModel;
import org.exbin.framework.App;
import org.exbin.framework.editor.text.SelectionRange;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;
import org.exbin.framework.utils.WindowUtils;

/**
 * Edit selection panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class EditSelectionPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(EditSelectionPanel.class);

    private int cursorPosition;
    private int maxPosition;
    private RelativePositionMode startPosMode = RelativePositionMode.FROM_START;
    private RelativePositionMode endPosMode = RelativePositionMode.FROM_START;
    private volatile boolean activeUpdate = false;

    public EditSelectionPanel() {
        initComponents();

        ((SpinnerNumberModel) startPositionBaseSwitchableSpinner.getModel()).setMinimum(0L);
        startPositionBaseSwitchableSpinner.addChangeListener((javax.swing.event.ChangeEvent evt) -> {
            if (!activeUpdate) {
                try {
                    activeUpdate = true;
                    long startPosition = getStartPositionValue();
                    long maxLength = maxPosition - startPosition;
                    ((SpinnerNumberModel) lengthBaseSwitchableSpinner.getModel()).setMaximum(maxLength);
                    long length = getEndPositionValue() - startPosition;
                    lengthBaseSwitchableSpinner.setValue(length);
                } finally {
                    activeUpdate = false;
                }
            }

            updateStartTargetPosition();
            updateEndTargetPosition();
        });
        ((SpinnerNumberModel) endPositionBaseSwitchableSpinner.getModel()).setMinimum(0L);
        endPositionBaseSwitchableSpinner.addChangeListener((javax.swing.event.ChangeEvent evt) -> {
            if (!activeUpdate) {
                try {
                    activeUpdate = true;
                    long startPosition = getStartPositionValue();
                    long length = getEndPositionValue() - startPosition;
                    lengthBaseSwitchableSpinner.setValue(length);
                } finally {
                    activeUpdate = false;
                }
            }

            updateStartTargetPosition();
            updateEndTargetPosition();
        });
        ((SpinnerNumberModel) lengthBaseSwitchableSpinner.getModel()).setMinimum(0L);
        lengthBaseSwitchableSpinner.addChangeListener((javax.swing.event.ChangeEvent evt) -> {
            if (!activeUpdate) {
                try {
                    activeUpdate = true;
                    long endPosition = getStartPositionValue() + getSelectionLengthValue();
                    endPositionBaseSwitchableSpinner.setValue(endPosition);
                } finally {
                    activeUpdate = false;
                }
            }

            updateStartTargetPosition();
            updateEndTargetPosition();
        });
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startPositionTypeButtonGroup = new javax.swing.ButtonGroup();
        endPositionTypeButtonGroup = new javax.swing.ButtonGroup();
        currentPositionLabel = new javax.swing.JLabel();
        currentPositionTextField = new javax.swing.JTextField();
        startPositionPanel = new javax.swing.JPanel();
        fromStartRadioButton = new javax.swing.JRadioButton();
        fromEndRadioButton = new javax.swing.JRadioButton();
        fromCursorRadioButton = new javax.swing.JRadioButton();
        positionLabel = new javax.swing.JLabel();
        startPositionBaseSwitchableSpinner = new javax.swing.JSpinner();
        endPositionPanel = new javax.swing.JPanel();
        fromStartRadioButton1 = new javax.swing.JRadioButton();
        fromEndRadioButton1 = new javax.swing.JRadioButton();
        fromCursorRadioButton1 = new javax.swing.JRadioButton();
        positionLabel1 = new javax.swing.JLabel();
        endPositionBaseSwitchableSpinner = new javax.swing.JSpinner();
        selectionLengthPanel = new javax.swing.JPanel();
        lengthBaseSwitchableSpinner = new javax.swing.JSpinner();
        startPositionLabel = new javax.swing.JLabel();
        startPositionTextField = new javax.swing.JTextField();
        endPositionLabel = new javax.swing.JLabel();
        endPositionTextField = new javax.swing.JTextField();

        currentPositionLabel.setText(resourceBundle.getString("currentPositionLabel.text")); // NOI18N

        currentPositionTextField.setEditable(false);
        currentPositionTextField.setText("0"); // NOI18N

        startPositionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("startPositionPanel.border.title"))); // NOI18N

        startPositionTypeButtonGroup.add(fromStartRadioButton);
        fromStartRadioButton.setSelected(true);
        fromStartRadioButton.setText(resourceBundle.getString("fromStartRadioButton.text")); // NOI18N
        fromStartRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromStartRadioButtonItemStateChanged(evt);
            }
        });

        startPositionTypeButtonGroup.add(fromEndRadioButton);
        fromEndRadioButton.setText(resourceBundle.getString("fromEndRadioButton.text")); // NOI18N
        fromEndRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromEndRadioButtonItemStateChanged(evt);
            }
        });

        startPositionTypeButtonGroup.add(fromCursorRadioButton);
        fromCursorRadioButton.setText(resourceBundle.getString("fromCursorRadioButton.text")); // NOI18N
        fromCursorRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromCursorRadioButtonItemStateChanged(evt);
            }
        });

        positionLabel.setText(resourceBundle.getString("positionLabel.text")); // NOI18N

        startPositionBaseSwitchableSpinner.setModel(new javax.swing.SpinnerNumberModel());

        javax.swing.GroupLayout startPositionPanelLayout = new javax.swing.GroupLayout(startPositionPanel);
        startPositionPanel.setLayout(startPositionPanelLayout);
        startPositionPanelLayout.setHorizontalGroup(
            startPositionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startPositionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(startPositionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fromCursorRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromEndRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromStartRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startPositionBaseSwitchableSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, startPositionPanelLayout.createSequentialGroup()
                        .addComponent(positionLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        startPositionPanelLayout.setVerticalGroup(
            startPositionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startPositionPanelLayout.createSequentialGroup()
                .addComponent(fromStartRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromEndRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromCursorRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(positionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startPositionBaseSwitchableSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        endPositionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("endPositionPanel.border.title"))); // NOI18N

        endPositionTypeButtonGroup.add(fromStartRadioButton1);
        fromStartRadioButton1.setSelected(true);
        fromStartRadioButton1.setText(resourceBundle.getString("fromStartRadioButton.text")); // NOI18N
        fromStartRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromStartRadioButton1ItemStateChanged(evt);
            }
        });

        endPositionTypeButtonGroup.add(fromEndRadioButton1);
        fromEndRadioButton1.setText(resourceBundle.getString("fromEndRadioButton.text")); // NOI18N
        fromEndRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromEndRadioButton1ItemStateChanged(evt);
            }
        });

        endPositionTypeButtonGroup.add(fromCursorRadioButton1);
        fromCursorRadioButton1.setText(resourceBundle.getString("fromCursorRadioButton.text")); // NOI18N
        fromCursorRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromCursorRadioButton1ItemStateChanged(evt);
            }
        });

        positionLabel1.setText(resourceBundle.getString("positionLabel.text")); // NOI18N

        endPositionBaseSwitchableSpinner.setModel(new javax.swing.SpinnerNumberModel());

        javax.swing.GroupLayout endPositionPanelLayout = new javax.swing.GroupLayout(endPositionPanel);
        endPositionPanel.setLayout(endPositionPanelLayout);
        endPositionPanelLayout.setHorizontalGroup(
            endPositionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, endPositionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(endPositionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fromCursorRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromEndRadioButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromStartRadioButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endPositionBaseSwitchableSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, endPositionPanelLayout.createSequentialGroup()
                        .addComponent(positionLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        endPositionPanelLayout.setVerticalGroup(
            endPositionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endPositionPanelLayout.createSequentialGroup()
                .addComponent(fromStartRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromEndRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromCursorRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(positionLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endPositionBaseSwitchableSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectionLengthPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("selectionLengthPanel.border.title"))); // NOI18N

        lengthBaseSwitchableSpinner.setModel(new javax.swing.SpinnerNumberModel());

        javax.swing.GroupLayout selectionLengthPanelLayout = new javax.swing.GroupLayout(selectionLengthPanel);
        selectionLengthPanel.setLayout(selectionLengthPanelLayout);
        selectionLengthPanelLayout.setHorizontalGroup(
            selectionLengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionLengthPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lengthBaseSwitchableSpinner)
                .addContainerGap())
        );
        selectionLengthPanelLayout.setVerticalGroup(
            selectionLengthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionLengthPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lengthBaseSwitchableSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        startPositionLabel.setText(resourceBundle.getString("startPositionLabel.text")); // NOI18N

        startPositionTextField.setEditable(false);
        startPositionTextField.setText("0"); // NOI18N

        endPositionLabel.setText(resourceBundle.getString("endPositionLabel.text")); // NOI18N

        endPositionTextField.setEditable(false);
        endPositionTextField.setText("0"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startPositionTextField)
                    .addComponent(endPositionTextField)
                    .addComponent(selectionLengthPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentPositionTextField)
                    .addComponent(startPositionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endPositionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currentPositionLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startPositionLabel)
                            .addComponent(endPositionLabel))
                        .addGap(330, 330, 330)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentPositionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startPositionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endPositionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectionLengthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startPositionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endPositionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fromStartRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromStartRadioButtonItemStateChanged
        if (fromStartRadioButton.isSelected()) {
            switchStartPosMode(RelativePositionMode.FROM_START);
        }
    }//GEN-LAST:event_fromStartRadioButtonItemStateChanged

    private void fromEndRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromEndRadioButtonItemStateChanged
        if (fromEndRadioButton.isSelected()) {
            switchStartPosMode(RelativePositionMode.FROM_END);
        }
    }//GEN-LAST:event_fromEndRadioButtonItemStateChanged

    private void fromCursorRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromCursorRadioButtonItemStateChanged
        if (fromCursorRadioButton.isSelected()) {
            switchStartPosMode(RelativePositionMode.FROM_CURSOR);
        }
    }//GEN-LAST:event_fromCursorRadioButtonItemStateChanged

    private void fromStartRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromStartRadioButton1ItemStateChanged
        if (fromStartRadioButton1.isSelected()) {
            switchEndPosMode(RelativePositionMode.FROM_START);
        }
    }//GEN-LAST:event_fromStartRadioButton1ItemStateChanged

    private void fromEndRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromEndRadioButton1ItemStateChanged
        if (fromEndRadioButton1.isSelected()) {
            switchEndPosMode(RelativePositionMode.FROM_END);
        }
    }//GEN-LAST:event_fromEndRadioButton1ItemStateChanged

    private void fromCursorRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromCursorRadioButton1ItemStateChanged
        if (fromCursorRadioButton1.isSelected()) {
            switchEndPosMode(RelativePositionMode.FROM_CURSOR);
        }
    }//GEN-LAST:event_fromCursorRadioButton1ItemStateChanged

    private void updateStartTargetPosition() {
        startPositionTextField.setText(String.valueOf(getStartTargetPosition()));
    }

    private void updateEndTargetPosition() {
        endPositionTextField.setText(String.valueOf(getEndTargetPosition()));
    }

    public void initFocus() {
        startPositionBaseSwitchableSpinner.requestFocus();
    }

    public int getStartTargetPosition() {
        int absolutePosition;
        int position = getStartPositionValue();
        switch (startPosMode) {
            case FROM_START:
                absolutePosition = position;
                break;
            case FROM_END:
                absolutePosition = maxPosition - position;
                break;
            case FROM_CURSOR:
                absolutePosition = cursorPosition + position;
                break;
            default:
                throw new IllegalStateException("Unexpected position mode " + startPosMode);
        }

        if (absolutePosition < 0) {
            absolutePosition = 0;
        } else if (absolutePosition > maxPosition) {
            absolutePosition = maxPosition;
        }
        return absolutePosition;
    }

    public int getEndTargetPosition() {
        int absolutePosition;
        int position = getEndPositionValue();
        switch (endPosMode) {
            case FROM_START:
                absolutePosition = position;
                break;
            case FROM_END:
                absolutePosition = maxPosition - position;
                break;
            case FROM_CURSOR:
                absolutePosition = cursorPosition + position;
                break;
            default:
                throw new IllegalStateException("Unexpected position mode " + endPosMode);
        }

        if (absolutePosition < 0) {
            absolutePosition = 0;
        } else if (absolutePosition > maxPosition) {
            absolutePosition = maxPosition;
        }
        return absolutePosition;
    }

    public void setStartTargetPosition(long absolutePosition) {
        if (absolutePosition < 0) {
            absolutePosition = 0;
        } else if (absolutePosition > maxPosition) {
            absolutePosition = maxPosition;
        }
        switch (startPosMode) {
            case FROM_START:
                setStartPositionValue(absolutePosition);
                break;
            case FROM_END:
                setStartPositionValue(maxPosition - absolutePosition);
                break;
            case FROM_CURSOR:
                setStartPositionValue(absolutePosition - cursorPosition);
                break;
            default:
                throw new IllegalStateException("Unexpected position mode " + startPosMode);
        }
        updateStartTargetPosition();
    }

    public void setEndTargetPosition(int absolutePosition) {
        if (absolutePosition < 0) {
            absolutePosition = 0;
        } else if (absolutePosition > maxPosition) {
            absolutePosition = maxPosition;
        }
        switch (endPosMode) {
            case FROM_START:
                setEndPositionValue(absolutePosition);
                break;
            case FROM_END:
                setEndPositionValue(maxPosition - absolutePosition);
                break;
            case FROM_CURSOR:
                setEndPositionValue(absolutePosition - cursorPosition);
                break;
            default:
                throw new IllegalStateException("Unexpected position mode " + endPosMode);
        }
        updateEndTargetPosition();
    }

    public int getCursorPosition() {
        return cursorPosition;
    }

    public void setCursorPosition(int cursorPosition) {
        this.cursorPosition = cursorPosition;
    }

    public void setMaxPosition(int maxPosition) {
        this.maxPosition = maxPosition;
        ((SpinnerNumberModel) startPositionBaseSwitchableSpinner.getModel()).setMaximum(maxPosition);
        ((SpinnerNumberModel) endPositionBaseSwitchableSpinner.getModel()).setMaximum(maxPosition);
        ((SpinnerNumberModel) lengthBaseSwitchableSpinner.getModel()).setMaximum(maxPosition);
        updateStartTargetPosition();
    }

    @Nonnull
    public Optional<SelectionRange> getSelectionRange() {
        return Optional.of(new SelectionRange(getStartTargetPosition(), getEndTargetPosition()));
    }

    public void setSelectionRange(@Nullable SelectionRange selection) {
        if (selection == null) {
            setStartTargetPosition(0);
            setEndTargetPosition(0);
        } else {
            setStartTargetPosition(selection.getStart());
            setEndTargetPosition(selection.getEnd());
        }
    }

    public void setSelected() {
        startPositionBaseSwitchableSpinner.requestFocusInWindow();
    }

    private void switchStartPosMode(RelativePositionMode positionMode) {
        if (this.startPosMode == positionMode) {
            return;
        }

        long absolutePosition = getStartTargetPosition();
        this.startPosMode = positionMode;
        switch (positionMode) {
            case FROM_START:
            case FROM_END: {
                setStartPositionValue(0L);
                SpinnerNumberModel model = (SpinnerNumberModel) startPositionBaseSwitchableSpinner.getModel();
                model.setMinimum(0L);
                model.setMaximum(maxPosition);
                startPositionBaseSwitchableSpinner.revalidate();
                break;
            }
            case FROM_CURSOR: {
                setStartPositionValue(0L);
                SpinnerNumberModel model = (SpinnerNumberModel) startPositionBaseSwitchableSpinner.getModel();
                model.setMinimum(-cursorPosition);
                model.setMaximum(maxPosition - cursorPosition);
                startPositionBaseSwitchableSpinner.revalidate();
                break;
            }
            default:
                throw new IllegalStateException("Unexpected position mode " + positionMode);
        }
        setStartTargetPosition(absolutePosition);
    }

    private void switchEndPosMode(RelativePositionMode positionMode) {
        if (this.endPosMode == positionMode) {
            return;
        }

        int absolutePosition = getEndTargetPosition();
        this.endPosMode = positionMode;
        switch (positionMode) {
            case FROM_START:
            case FROM_END: {
                setEndPositionValue(0L);
                SpinnerNumberModel model = (SpinnerNumberModel) startPositionBaseSwitchableSpinner.getModel();
                model.setMinimum(0L);
                model.setMaximum(maxPosition);
                startPositionBaseSwitchableSpinner.revalidate();
                break;
            }
            case FROM_CURSOR: {
                setEndPositionValue(0L);
                SpinnerNumberModel model = (SpinnerNumberModel) startPositionBaseSwitchableSpinner.getModel();
                model.setMinimum(-cursorPosition);
                model.setMaximum(maxPosition - cursorPosition);
                startPositionBaseSwitchableSpinner.revalidate();
                break;
            }
            default:
                throw new IllegalStateException("Unexpected position mode " + positionMode);
        }
        setEndTargetPosition(absolutePosition);
    }

    private int getStartPositionValue() {
        return (Integer) startPositionBaseSwitchableSpinner.getValue();
    }

    private int getEndPositionValue() {
        return (Integer) endPositionBaseSwitchableSpinner.getValue();
    }

    private int getSelectionLengthValue() {
        return (Integer) lengthBaseSwitchableSpinner.getValue();
    }

    private void setStartPositionValue(long value) {
        startPositionBaseSwitchableSpinner.setValue(value);
        lengthBaseSwitchableSpinner.setValue(getEndPositionValue() - value);
        updateStartTargetPosition();
    }

    private void setEndPositionValue(long value) {
        endPositionBaseSwitchableSpinner.setValue(value);
        lengthBaseSwitchableSpinner.setValue(value - getStartPositionValue());
        updateEndTargetPosition();
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new EditSelectionPanel());
        });
    }

    public void acceptInput() {
        try {
            startPositionBaseSwitchableSpinner.commitEdit();
        } catch (ParseException ex) {
            // Ignore parse exception
        }
        try {
            endPositionBaseSwitchableSpinner.commitEdit();
        } catch (ParseException ex) {
            // Ignore parse exception
        }
        try {
            lengthBaseSwitchableSpinner.commitEdit();
        } catch (ParseException ex) {
            // Ignore parse exception
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentPositionLabel;
    private javax.swing.JTextField currentPositionTextField;
    private javax.swing.JSpinner endPositionBaseSwitchableSpinner;
    private javax.swing.JLabel endPositionLabel;
    private javax.swing.JPanel endPositionPanel;
    private javax.swing.JTextField endPositionTextField;
    private javax.swing.ButtonGroup endPositionTypeButtonGroup;
    private javax.swing.JRadioButton fromCursorRadioButton;
    private javax.swing.JRadioButton fromCursorRadioButton1;
    private javax.swing.JRadioButton fromEndRadioButton;
    private javax.swing.JRadioButton fromEndRadioButton1;
    private javax.swing.JRadioButton fromStartRadioButton;
    private javax.swing.JRadioButton fromStartRadioButton1;
    private javax.swing.JSpinner lengthBaseSwitchableSpinner;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JLabel positionLabel1;
    private javax.swing.JPanel selectionLengthPanel;
    private javax.swing.JSpinner startPositionBaseSwitchableSpinner;
    private javax.swing.JLabel startPositionLabel;
    private javax.swing.JPanel startPositionPanel;
    private javax.swing.JTextField startPositionTextField;
    private javax.swing.ButtonGroup startPositionTypeButtonGroup;
    // End of variables declaration//GEN-END:variables
}
