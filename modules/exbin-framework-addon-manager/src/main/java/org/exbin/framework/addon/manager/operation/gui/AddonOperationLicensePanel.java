/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.addon.manager.operation.gui;

import java.io.IOException;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.DefaultListModel;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.ListSelectionEvent;
import org.exbin.framework.App;
import org.exbin.framework.addon.manager.operation.model.LicenseItemRecord;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.DesktopUtils;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;

/**
 * Addons operation license approval panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class AddonOperationLicensePanel extends javax.swing.JPanel {

    private final ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(AddonOperationLicensePanel.class);
    private Controller controller;
    private List<LicenseItemRecord> licenseRecords;
    private int toApprove;

    public AddonOperationLicensePanel() {
        initComponents();
        init();
    }

    private void init() {
        licenseList.setModel(new DefaultListModel<>());
        licenseList.addListSelectionListener((ListSelectionEvent e) -> {
            int selectedIndex = licenseList.getSelectedIndex();
            if (selectedIndex < 0) {
                licenseContentEditorPane.setText("");
                licenseApprovalCheckBox.setSelected(false);
                licenseApprovalCheckBox.setEnabled(false);
            } else {
                LicenseItemRecord record = licenseRecords.get(selectedIndex);
                try {
                    licenseContentEditorPane.setPage(record.getUrl());
                } catch (IOException ex) {
                    Logger.getLogger(AddonOperationLicensePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                licenseApprovalCheckBox.setSelected(record.isApproved());
                licenseApprovalCheckBox.setEnabled(true);
            }
        });
        licenseContentEditorPane.addHyperlinkListener((HyperlinkEvent event) -> {
            if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                DesktopUtils.openDesktopURL(event.getURL().toExternalForm());
            }
        });
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    public void setController(Controller controller) {
        this.controller = controller;
    }

    public void setLicenseRecords(List<LicenseItemRecord> licenseRecords) {
        this.licenseRecords = licenseRecords;
        DefaultListModel<String> model = (DefaultListModel<String>) licenseList.getModel();
        model.removeAllElements();
        for (LicenseItemRecord licenseRecord : licenseRecords) {
            model.addElement(licenseRecord.getName());
        }
        toApprove = licenseRecords.size();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        licensesToApproveLabel = new javax.swing.JLabel();
        splitPane = new javax.swing.JSplitPane();
        listPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        licenseList = new javax.swing.JList<>();
        licensePanel = new javax.swing.JPanel();
        licenseContentScrollPane = new javax.swing.JScrollPane();
        licenseContentEditorPane = new javax.swing.JEditorPane();
        licenseApprovalCheckBox = new javax.swing.JCheckBox();

        licensesToApproveLabel.setText(resourceBundle.getString("licensesToApproveLabel.text")); // NOI18N

        splitPane.setDividerLocation(250);

        listPanel.setLayout(new javax.swing.BoxLayout(listPanel, javax.swing.BoxLayout.LINE_AXIS));

        scrollPane.setViewportView(licenseList);

        listPanel.add(scrollPane);

        splitPane.setLeftComponent(listPanel);

        licenseContentEditorPane.setEditable(false);
        licenseContentScrollPane.setViewportView(licenseContentEditorPane);

        licenseApprovalCheckBox.setText(resourceBundle.getString("licenseApprovalCheckBox.text")); // NOI18N
        licenseApprovalCheckBox.setEnabled(false);
        licenseApprovalCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                licenseApprovalCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout licensePanelLayout = new javax.swing.GroupLayout(licensePanel);
        licensePanel.setLayout(licensePanelLayout);
        licensePanelLayout.setHorizontalGroup(
            licensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(licensePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(licensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(licenseContentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                    .addGroup(licensePanelLayout.createSequentialGroup()
                        .addComponent(licenseApprovalCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        licensePanelLayout.setVerticalGroup(
            licensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, licensePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(licenseContentScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(licenseApprovalCheckBox)
                .addContainerGap())
        );

        splitPane.setRightComponent(licensePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(licensesToApproveLabel)
                        .addContainerGap(518, Short.MAX_VALUE))
                    .addComponent(splitPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(licensesToApproveLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splitPane))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void licenseApprovalCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_licenseApprovalCheckBoxItemStateChanged
        int selectedIndex = licenseList.getSelectedIndex();
        if (selectedIndex >= 0) {
            LicenseItemRecord record = licenseRecords.get(selectedIndex);
            boolean isApproved = record.isApproved();
            boolean changeTo = licenseApprovalCheckBox.isSelected();
            if (isApproved != changeTo) {
                record.setApproved(changeTo);
                toApprove += changeTo ? -1 : 1;
                if (controller != null) {
                    controller.approvalStateChanged(toApprove);
                }
            }
        }
    }//GEN-LAST:event_licenseApprovalCheckBoxItemStateChanged

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new AddonOperationLicensePanel());
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox licenseApprovalCheckBox;
    private javax.swing.JEditorPane licenseContentEditorPane;
    private javax.swing.JScrollPane licenseContentScrollPane;
    private javax.swing.JList<String> licenseList;
    private javax.swing.JPanel licensePanel;
    private javax.swing.JLabel licensesToApproveLabel;
    private javax.swing.JPanel listPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSplitPane splitPane;
    // End of variables declaration//GEN-END:variables

    public interface Controller {

        void approvalStateChanged(int toApprove);
    }
}
