/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.addon.manager.gui;

import java.awt.event.MouseListener;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.framework.App;
import org.exbin.framework.addon.manager.model.AddonRecord;
import org.exbin.framework.addon.manager.model.DependenciesTableModel;
import org.exbin.framework.addon.manager.model.ItemRecord;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.DesktopUtils;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;

/**
 * Addon details panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class AddonDetailsPanel extends javax.swing.JPanel {

    private final ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(AddonDetailsPanel.class);
    private Controller controller;
    private MouseListener homepageLinkListener;
    private final DependenciesTableModel dependenciesTableModel = new DependenciesTableModel();
    private ItemRecord activeRecord;

    public AddonDetailsPanel() {
        initComponents();
        init();
    }

    private void init() {
        dependenciesTable.setModel(dependenciesTableModel);
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    public void setController(Controller control) {
        this.controller = control;
    }

    public void setRecord(ItemRecord itemRecord) {
        activeRecord = itemRecord;
        addonNameLabel.setText(itemRecord.getName());
        versionLabel.setText(itemRecord.getVersion());
        String provider = itemRecord.getProvider().orElse("");
        String homepage = itemRecord.getHomepage().orElse(null);

        if (homepageLinkListener != null) {
            providerLabel.removeMouseListener(homepageLinkListener);
        }
        if (homepage != null) {
            provider = "<html><body><a href=\"" + homepage + "\">" + (provider.isEmpty() ? resourceBundle.getString("record.provider") : provider) + "</a></body></html>";
            providerLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            homepageLinkListener = new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    DesktopUtils.openDesktopURL(homepage);
                }
            };
            providerLabel.addMouseListener(homepageLinkListener);
        } else {
            providerLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        }
        providerLabel.setText(provider);
        String description = itemRecord.getDescription().orElse("");
        overviewTextPane.setText("<html><body>id: " + itemRecord.getId() + "<br/>" + description + "</body></html>");
        if (itemRecord instanceof AddonRecord) {
            dependenciesTableModel.setDependencies(((AddonRecord) itemRecord).getDependencies());
        } else {
            dependenciesTableModel.setDependencies(null);
        }
        updateButton.setEnabled(itemRecord.isUpdateAvailable());
        updateButton.setText(resourceBundle.getString(itemRecord.isSelected() ? "updateButton.unselect.text" : "updateButton.text"));
        enablementButton.setText(resourceBundle.getString(itemRecord.isEnabled() ? "disableButton.text" : "enableButton.text"));
        installationlButton.setText(resourceBundle.getString(itemRecord.isInstalled() ? "removeButton.text" : (itemRecord.isSelected() ? "installButton.unselect.text" : "installButton.text")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();
        enablementButton = new javax.swing.JButton();
        installationlButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        addonNameLabel = new javax.swing.JLabel();
        providerLabel = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        tabbedPane = new javax.swing.JTabbedPane();
        overviewScrollPane = new javax.swing.JScrollPane();
        overviewTextPane = new javax.swing.JTextPane();
        dependenciesScrollPane = new javax.swing.JScrollPane();
        dependenciesTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        updateButton.setText(resourceBundle.getString("updateButton.text")); // NOI18N
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        enablementButton.setText(resourceBundle.getString("enableButton.text")); // NOI18N
        enablementButton.setEnabled(false);
        enablementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enablementButtonActionPerformed(evt);
            }
        });

        installationlButton.setText(resourceBundle.getString("installButton.text")); // NOI18N
        installationlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installationlButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addComponent(updateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enablementButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(installationlButton)
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(installationlButton)
                    .addComponent(enablementButton)
                    .addComponent(updateButton))
                .addContainerGap())
        );

        add(controlPanel, java.awt.BorderLayout.PAGE_END);

        addonNameLabel.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        addonNameLabel.setText("Addon Name");

        providerLabel.setFont(providerLabel.getFont().deriveFont((providerLabel.getFont().getStyle() & ~java.awt.Font.ITALIC) & ~java.awt.Font.BOLD));
        providerLabel.setText("Addon Provider");

        versionLabel.setText("Version");

        overviewTextPane.setContentType("text/html"); // NOI18N
        overviewScrollPane.setViewportView(overviewTextPane);

        tabbedPane.addTab(resourceBundle.getString("overviewTab.title"), overviewScrollPane); // NOI18N

        dependenciesScrollPane.setViewportView(dependenciesTable);

        tabbedPane.addTab(resourceBundle.getString("dependenciesTab.title"), dependenciesScrollPane); // NOI18N

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(addonNameLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(providerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionLabel)))
                .addContainerGap())
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addonNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionLabel)
                    .addComponent(providerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(infoPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void enablementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enablementButtonActionPerformed
        controller.enablement();
    }//GEN-LAST:event_enablementButtonActionPerformed

    private void installationlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installationlButtonActionPerformed
        controller.installment();
        installationlButton.setText(resourceBundle.getString(activeRecord.isInstalled() ? "removeButton.text" : (activeRecord.isSelected() ? "installButton.unselect.text" : "installButton.text")));
    }//GEN-LAST:event_installationlButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        controller.update();
        updateButton.setText(resourceBundle.getString(activeRecord.isSelected() ? "updateButton.unselect.text" : "updateButton.text"));
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new AddonDetailsPanel());
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addonNameLabel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JScrollPane dependenciesScrollPane;
    private javax.swing.JTable dependenciesTable;
    private javax.swing.JButton enablementButton;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JButton installationlButton;
    private javax.swing.JScrollPane overviewScrollPane;
    private javax.swing.JTextPane overviewTextPane;
    private javax.swing.JLabel providerLabel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables

    public interface Controller {

        void enablement();

        void installment();

        void update();
    }
}
