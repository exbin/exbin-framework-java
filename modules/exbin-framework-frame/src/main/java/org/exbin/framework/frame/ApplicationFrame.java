/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.frame;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Rectangle;
import java.beans.PropertyChangeEvent;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import org.exbin.framework.App;
import org.exbin.framework.action.api.ActionConsts;
import org.exbin.framework.action.api.ActionManager;
import org.exbin.framework.frame.api.ApplicationFrameHandler;
import org.exbin.framework.window.api.gui.WindowHeaderPanel;
import org.exbin.framework.preferences.api.PreferencesModuleApi;
import org.exbin.framework.action.api.ActionModuleApi;
import org.exbin.framework.action.api.ComponentActivationListener;
import org.exbin.framework.action.api.ComponentActivationService;
import org.exbin.framework.action.api.MenuManagement;
import org.exbin.framework.action.api.ToolBarManagement;
import org.exbin.framework.frame.api.FrameModuleApi;
import static org.exbin.framework.frame.api.FrameModuleApi.MODULE_ID;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.language.api.ApplicationInfoKeys;

/**
 * Basic appplication frame.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class ApplicationFrame extends javax.swing.JFrame implements ApplicationFrameHandler, WindowHeaderPanel.WindowHeaderDecorationProvider {

    private ApplicationExitHandler exitHandler;
    private JPanel currentStatusBarPanel = null;
    private boolean captionsVisible = true;
    private WindowHeaderPanel.WindowHeaderDecorationProvider windowHeaderDecorationProvider;
    private ActionManager frameComponentActivationService;

    public ApplicationFrame() {
        this(true);
    }

    public ApplicationFrame(boolean undecorated) {
        ActionModuleApi actionModule = App.getModule(ActionModuleApi.class);
        frameComponentActivationService = actionModule.createActionManager();

        if (undecorated) {
            setUndecorated(true);
        }

        initComponents();

        // Actions on change of look&feel
        UIManager.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            SwingUtilities.updateComponentTreeUI(ApplicationFrame.this);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainStatusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        progressStatusPanel = new javax.swing.JPanel();
        statusProgressBar = new javax.swing.JProgressBar();
        stopProgressButton = new javax.swing.JButton();
        busyStatusPanel = new javax.swing.JPanel();
        busyProgressBar = new javax.swing.JProgressBar();
        toolBar = new javax.swing.JToolBar();
        statusBar = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();

        mainStatusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        mainStatusPanel.add(statusLabel);

        statusProgressBar.setIndeterminate(true);
        statusProgressBar.setMinimumSize(new java.awt.Dimension(10, 10));
        statusProgressBar.setRequestFocusEnabled(false);
        statusProgressBar.setStringPainted(true);

        stopProgressButton.setText("Stop");
        stopProgressButton.setEnabled(false);
        stopProgressButton.setMinimumSize(new java.awt.Dimension(67, 15));
        stopProgressButton.setPreferredSize(new java.awt.Dimension(75, 20));

        javax.swing.GroupLayout progressStatusPanelLayout = new javax.swing.GroupLayout(progressStatusPanel);
        progressStatusPanel.setLayout(progressStatusPanelLayout);
        progressStatusPanelLayout.setHorizontalGroup(
            progressStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressStatusPanelLayout.createSequentialGroup()
                .addComponent(statusProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopProgressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        progressStatusPanelLayout.setVerticalGroup(
            progressStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stopProgressButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        busyStatusPanel.setLayout(new java.awt.BorderLayout());

        busyProgressBar.setIndeterminate(true);
        busyProgressBar.setRequestFocusEnabled(false);
        busyProgressBar.setStringPainted(true);
        busyStatusPanel.add(busyProgressBar, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        toolBar.setRollover(true);
        toolBar.setFocusable(false);
        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        statusBar.setLayout(new java.awt.BorderLayout());
        statusBar.add(statusPanelSeparator, java.awt.BorderLayout.NORTH);

        statusPanel.setPreferredSize(new java.awt.Dimension(649, 26));
        statusPanel.setRequestFocusEnabled(false);
        statusPanel.setLayout(new java.awt.BorderLayout());
        statusBar.add(statusPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(statusBar, java.awt.BorderLayout.SOUTH);
        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (exitHandler == null) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (exitHandler != null) {
            exitHandler.executeExit(this);
        } else {
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar busyProgressBar;
    private javax.swing.JPanel busyStatusPanel;
    private javax.swing.JPanel mainStatusPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel progressStatusPanel;
    private javax.swing.JPanel statusBar;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JProgressBar statusProgressBar;
    private javax.swing.JButton stopProgressButton;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    /**
     * Main method to test frame.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(() -> {
            ApplicationFrame frame = new ApplicationFrame();
            frame.setVisible(true);
        });
    }

    @Nonnull
    @Override
    public Frame getFrame() {
        return this;
    }

    @Override
    public boolean isToolBarVisible() {
        return toolBar.isVisible();
    }

    @Override
    public void setToolBarVisible(boolean toolBarVisible) {
        toolBar.setVisible(toolBarVisible);
    }

    @Override
    public boolean isStatusBarVisible() {
        return statusBar.isVisible();
    }

    @Override
    public void setStatusBarVisible(boolean statusBarVisible) {
        statusBar.setVisible(statusBarVisible);
    }

    @Override
    public boolean isToolBarCaptionsVisible() {
        return captionsVisible;
    }

    @Override
    public void setToolBarCaptionsVisible(boolean captionsVisible) {
        this.captionsVisible = captionsVisible;
        Component[] comps = toolBar.getComponents();

        for (Component comp : comps) {
            if (comp instanceof JButton) {
                ((JButton) comp).setHideActionText(!captionsVisible);
            } else if (comp instanceof JToggleButton) {
                ((JToggleButton) comp).setHideActionText(!captionsVisible);
            } else if (comp instanceof JRadioButton) {
                ((JRadioButton) comp).setHideActionText(!captionsVisible);
            } else if (comp instanceof JCheckBoxMenuItem) {
                ((JCheckBoxMenuItem) comp).setHideActionText(!captionsVisible);
            }
        }
    }

    @Override
    public void initApplication() {
        LanguageModuleApi languageModule = App.getModule(LanguageModuleApi.class);
        ResourceBundle appBundle = languageModule.getAppBundle();
        setTitle(appBundle.getString(ApplicationInfoKeys.APPLICATION_NAME));
        if (appBundle.containsKey(ApplicationInfoKeys.APPLICATION_ICON)) {
            setIconImage(new ImageIcon(getClass().getResource(appBundle.getString(ApplicationInfoKeys.APPLICATION_ICON))).getImage());
        }
    }

    @Override
    public void setMainPanel(Component component) {
        getContentPane().add(component, java.awt.BorderLayout.CENTER);
    }

    @Override
    public void loadMainMenu() {
        ActionModuleApi actionModule = App.getModule(ActionModuleApi.class);
        MenuManagement mgmt = actionModule.getMenuManagement(MODULE_ID);
        mgmt.buildMenu(menuBar, ActionConsts.MAIN_MENU_ID, new ComponentActivationService() {
            @Override
            public void registerListener(ComponentActivationListener listener) {
                frameComponentActivationService.registerListener(listener);
            }

            @Override
            public void requestUpdate() {
                frameComponentActivationService.requestUpdate();
            }

            @Override
            public void requestUpdate(Action action) {
                frameComponentActivationService.registerAction(action);
                frameComponentActivationService.initAction(action);
                frameComponentActivationService.requestUpdate(action);
            }
        });
    }

    @Override
    public void loadMainToolBar() {
        ActionModuleApi actionModule = App.getModule(ActionModuleApi.class);
        ToolBarManagement mgmt = actionModule.getToolBarManagement(MODULE_ID);
        mgmt.buildToolBar(toolBar, ActionConsts.MAIN_TOOL_BAR_ID, new ComponentActivationService() {
            @Override
            public void registerListener(ComponentActivationListener listener) {
                frameComponentActivationService.registerListener(listener);
            }

            @Override
            public void requestUpdate() {
                frameComponentActivationService.requestUpdate();
            }

            @Override
            public void requestUpdate(Action action) {
                frameComponentActivationService.registerAction(action);
                frameComponentActivationService.initAction(action);
                frameComponentActivationService.requestUpdate(action);
            }
        });
    }

    @Override
    public void showFrame() {
        setVisible(true);
    }

    public void switchStatusBar(@Nullable JPanel panel) {
        if (currentStatusBarPanel != null) {
            statusPanel.remove(currentStatusBarPanel);
        }

        if (panel != null) {
            statusPanel.add(panel);
        }
        statusPanel.invalidate();

        currentStatusBarPanel = panel;
    }

    @Override
    public void setDefaultSize(Dimension windowSize) {
        PreferencesModuleApi preferencesModule = App.getModule(PreferencesModuleApi.class);
        String rectangleString = preferencesModule.getAppPreferences().get(FrameModuleApi.PREFERENCES_FRAME_RECTANGLE, "");
        if (!rectangleString.isEmpty()) {
            String[] split = rectangleString.split("[,]");
            Rectangle rect = new Rectangle(Integer.parseInt(split[0]), Integer.parseInt(split[1]), Integer.parseInt(split[2]), Integer.parseInt(split[3]));
            setBounds(rect);
            return;
        }
        setSize(windowSize);
        setLocationRelativeTo(null);
    }

    public void setApplicationExitHandler(ApplicationExitHandler exitHandler) {
        this.exitHandler = exitHandler;
    }

    @Nonnull
    @Override
    public ComponentActivationListener getComponentActivationListener() {
        return frameComponentActivationService;
    }

    @Nonnull
    @Override
    public ComponentActivationService getComponentActivationService() {
        return frameComponentActivationService;
    }

//    @Override
//    public void setWindowHeaderDecorationProvider(WindowHeaderPanel.WindowHeaderDecorationProvider windowHeaderDecorationProvider) {
//        this.windowHeaderDecorationProvider = windowHeaderDecorationProvider;
//    }
    @Override
    public void setHeaderDecoration(WindowHeaderPanel windowHeaderPanel) {
        if (windowHeaderDecorationProvider != null) {
            windowHeaderDecorationProvider.setHeaderDecoration(windowHeaderPanel);
        }
    }
}
