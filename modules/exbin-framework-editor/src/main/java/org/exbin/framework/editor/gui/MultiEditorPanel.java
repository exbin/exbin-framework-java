/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.gui;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.JPopupMenu;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.file.api.FileHandler;

/**
 * Multi editor panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class MultiEditorPanel extends javax.swing.JPanel {

    private final List<FileHandler> fileHandlers = new ArrayList<>();
    private Controller controller;
    private int activeIndex = -1;

    public MultiEditorPanel() {
        initComponents();
        init();
    }

    private void init() {
        tabbedPane.addChangeListener((e) -> {
            int selectedIndex = tabbedPane.getSelectedIndex();
            changeActiveIndex(selectedIndex);
        });

        tabbedPane.setComponentPopupMenu(new JPopupMenu() {
            @Override
            public void show(Component invoker, int x, int y) {
                int index = tabbedPane.indexAtLocation(x, y);
                if (controller != null) {
                    controller.showPopupMenu(index, invoker, x, y);
                }
            }
        });
    }

    public void setController(Controller controller) {
        this.controller = controller;
    }

    public int getFileHandlersCount() {
        return fileHandlers.size();
    }

    @Nonnull
    public FileHandler getFileHandler(int index) {
        return fileHandlers.get(index);
    }

    public void addFileHandler(FileHandler fileHandler, String text) {
        fileHandlers.add(fileHandler);
        tabbedPane.addTab(text, fileHandler.getComponent());
        tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
    }

    public void insertFileHandler(int position, FileHandler fileHandler, String text) {
        fileHandlers.add(position, fileHandler);
        tabbedPane.insertTab(text, null, fileHandler.getComponent(), null, position);
        tabbedPane.setSelectedIndex(position);
    }

    public void removeFileHandler(FileHandler fileHandler) {
        int index = fileHandlers.indexOf(fileHandler);
        if (index >= 0) {
            removeFileHandlerAt(index);
        }
    }

    public void removeFileHandlerAt(int index) {
        if (index == activeIndex) {
            changeActiveIndex(-1);
        } else if (index < activeIndex) {
            changeActiveIndex(activeIndex--);
        }

        fileHandlers.remove(index);
        tabbedPane.removeTabAt(index);
    }

    public void removeAllFileHandlers() {
        for (int i = fileHandlers.size() - 1; i >= 0; i--) {
            removeFileHandlerAt(i);
        }
    }

    public void removeAllFileHandlersExceptFile(FileHandler exceptHandler) {
        for (int i = fileHandlers.size() - 1; i >= 0; i--) {
            if (fileHandlers.get(i) == exceptHandler) {
                continue;
            } else {
                removeFileHandlerAt(i);
            }
        }
    }

    private void changeActiveIndex(int index) {
        if (activeIndex != index) {
            activeIndex = index;
            notifyActiveIndexChanged();
        }
    }

    private void notifyActiveIndexChanged() {
        if (controller != null) {
            controller.activeIndexChanged(activeIndex);
        }
    }

    public void updateFileHandlerAt(int index, String text) {
        Component component = tabbedPane.getTabComponentAt(index);
        component.setName(text);
    }

    public int getActiveIndex() {
        return activeIndex;
    }

    @Nonnull
    public Optional<FileHandler> getActiveFile() {
        if (activeIndex == -1 || fileHandlers.isEmpty()) {
            return Optional.empty();
        }
        return Optional.of(fileHandlers.get(getActiveIndex()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();

        setPreferredSize(new java.awt.Dimension(400, 300));
        setLayout(new java.awt.BorderLayout());
        add(tabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        WindowUtils.invokeWindow(new MultiEditorPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    @ParametersAreNonnullByDefault
    public interface Controller {

        void activeIndexChanged(int index);

        void showPopupMenu(int index, Component component, int positionX, int positionY);
    }
}
