/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.gui.update;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.ResourceBundle;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.gui.utils.ActionUtils;
import org.exbin.framework.gui.utils.BareBonesBrowserLaunch;
import org.exbin.framework.gui.utils.WindowUtils;

/**
 * Check updates dialog.
 *
 * @version 0.2.0 2016/07/03
 * @author ExBin Project (http://exbin.org)
 */
public class CheckUpdatesDialog extends javax.swing.JDialog implements HyperlinkListener {

    private final XBApplication appEditor;
    private ResourceBundle appBundle;
    private final ResourceBundle bundle = ActionUtils.getResourceBundleByClass(CheckUpdatesDialog.class);
    private String updateWebsite;

    public CheckUpdatesDialog(java.awt.Frame parent, boolean modal, XBApplication appEditor) {
        super(parent, modal);

        this.appEditor = appEditor;
        if (appEditor != null) {
            appBundle = appEditor.getAppBundle();
        } else {
            appBundle = bundle;
        }

        init();
    }

    private void init() {
        initComponents();

        WindowUtils.initWindow(this);
//        WindowUtils.assignGlobalKeyListener(this, closeButton);
    }

    /**
     * Opens hyperlink in external browser.
     *
     * @param event hyperlink event
     */
    @Override
    public void hyperlinkUpdate(HyperlinkEvent event) {
        if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            BareBonesBrowserLaunch.openURL(event.getURL().toExternalForm());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        linkPopupMenu = new javax.swing.JPopupMenu();
        copyLinkMenuItem = new javax.swing.JMenuItem();

        linkPopupMenu.setName("linkPopupMenu"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/exbin/framework/gui/update/resources/CheckUpdatesDialog"); // NOI18N
        copyLinkMenuItem.setText(bundle.getString("copyLinkMenuItem.text")); // NOI18N
        copyLinkMenuItem.setName("copyLinkMenuItem"); // NOI18N
        copyLinkMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyLinkMenuItemActionPerformed(evt);
            }
        });
        linkPopupMenu.add(copyLinkMenuItem);

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("org/exbin/framework/gui/about/resources/AboutDialog"); // NOI18N
        setTitle(bundle1.getString("aboutBox.title")); // NOI18N
        setLocationByPlatform(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 664, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void copyLinkMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyLinkMenuItemActionPerformed
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(new StringSelection(updateWebsite), null);
    }//GEN-LAST:event_copyLinkMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeWindow(new CheckUpdatesDialog(new javax.swing.JFrame(), true, WindowUtils.getDefaultAppEditor()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copyLinkMenuItem;
    private javax.swing.JPopupMenu linkPopupMenu;
    // End of variables declaration//GEN-END:variables

    public ResourceBundle getProjectResourceBundle() {
        return appBundle;
    }

    public void setProjectResourceBundle(ResourceBundle projectResourceBundle) {
        this.appBundle = projectResourceBundle;
    }
}
