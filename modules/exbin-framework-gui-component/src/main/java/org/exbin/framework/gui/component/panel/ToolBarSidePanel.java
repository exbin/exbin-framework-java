/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.gui.component.panel;

import java.awt.BorderLayout;
import javax.swing.JToolBar;
import org.exbin.framework.gui.component.GuiComponentModule;
import org.exbin.framework.gui.component.api.EditItemActions;
import org.exbin.framework.gui.component.api.EditItemActionsHandler;
import org.exbin.framework.gui.component.api.EditItemActionsHandlerEmpty;
import org.exbin.framework.gui.component.api.MoveItemActions;
import org.exbin.framework.gui.component.api.MoveItemActionsHandler;
import org.exbin.framework.gui.component.api.MoveItemActionsHandlerEmpty;
import org.exbin.framework.gui.utils.GuiUtilsModule;
import org.exbin.framework.gui.utils.TestApplication;
import org.exbin.framework.gui.utils.WindowUtils;

/**
 * Panel with side toolbar.
 *
 * @version 0.2.1 2017/02/21
 * @author ExBin Project (http://exbin.org)
 */
public class ToolBarSidePanel extends javax.swing.JPanel {

    private MoveItemActionsHandler moveItemActionsHandler = null;
    private EditItemActionsHandler editItemActionsHandler = null;
    private JToolBar toolBar = null;
    private ToolBarPosition toolBarPosisition = ToolBarPosition.LEFT;

    public ToolBarSidePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        TestApplication testApplication = GuiUtilsModule.getDefaultAppEditor();
        GuiComponentModule guiComponentModule = new GuiComponentModule();
        testApplication.addModule(GuiComponentModule.MODULE_ID, guiComponentModule);

        ToolBarSidePanel toolBarSidePanel = new ToolBarSidePanel();
        MoveItemActionsHandler moveItemActionsHandler = new MoveItemActionsHandlerEmpty();
        toolBarSidePanel.setMoveItemsHandler(moveItemActionsHandler, guiComponentModule.createMoveItemActions(moveItemActionsHandler));
        EditItemActionsHandler editItemActionsHandler = new EditItemActionsHandlerEmpty();
        toolBarSidePanel.setEditItemsHandler(editItemActionsHandler, guiComponentModule.createEditItemActions(editItemActionsHandler));
        WindowUtils.invokeDialog(toolBarSidePanel);
    }

    public void setEditItemsHandler(EditItemActionsHandler editItemActionsHandler, EditItemActions editItemActions) {
        this.editItemActionsHandler = editItemActionsHandler;
        initToolBar();
        toolBar.add(editItemActions.getAddItemAction());
        toolBar.add(editItemActions.getEditItemAction());
        toolBar.add(editItemActions.getDeleteItemAction());
        editItemActions.updateEditItemActions();
    }

    public void setMoveItemsHandler(MoveItemActionsHandler moveItemActionsHandler, MoveItemActions moveItemActions) {
        this.moveItemActionsHandler = moveItemActionsHandler;
        initToolBar();
        if (editItemActionsHandler != null) {
            toolBar.addSeparator();
        }
        toolBar.add(moveItemActions.getMoveTopAction());
        toolBar.add(moveItemActions.getMoveUpAction());
        toolBar.add(moveItemActions.getMoveDownAction());
        toolBar.add(moveItemActions.getMoveBottomAction());
        moveItemActions.updateMoveItemActions();
    }

    private void initToolBar() {
        if (toolBar == null) {
            toolBar = new JToolBar();
            toolBar.setOrientation(JToolBar.VERTICAL);
            toolBar.setFloatable(false);
            add(toolBar, toolBarPosisition == ToolBarPosition.LEFT ? BorderLayout.WEST : BorderLayout.EAST);
        }
    }

    public ToolBarPosition getToolBarPosisition() {
        return toolBarPosisition;
    }

    public void setToolBarPosisition(ToolBarPosition toolBarPosisition) {
        this.toolBarPosisition = toolBarPosisition;
    }

    public enum ToolBarPosition {
        LEFT, RIGHT
    }
}
