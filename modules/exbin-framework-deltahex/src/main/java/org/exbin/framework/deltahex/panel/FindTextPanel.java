/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.deltahex.panel;

import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.exbin.framework.deltahex.dialog.FindHexDialog;
import org.exbin.framework.gui.utils.WindowUtils;

/**
 * Hexadecimal editor search panel.
 *
 * @version 0.1.0 2016/06/12
 * @author ExBin Project (http://exbin.org)
 */
public class FindTextPanel extends javax.swing.JPanel {

    private Thread searchStartThread;
    private Thread searchThread;
    private SearchParameters searchParameters;
    private final HexPanel hexPanel;
    private int matchesCount;
    private int matchPosition;

    public FindTextPanel(HexPanel hexPanel, boolean replaceMode) {
        initComponents();
        this.hexPanel = hexPanel;
        if (!replaceMode) {
            super.remove(replacePanel);
        }

        Component editorComponent = findComboBox.getEditor().getEditorComponent();
        if (editorComponent instanceof JTextField) {
            ((JTextField) editorComponent).getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    comboBoxValueChanged();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    comboBoxValueChanged();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    comboBoxValueChanged();
                }
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topSeparator = new javax.swing.JSeparator();
        findPanel = new javax.swing.JPanel();
        findLabel = new javax.swing.JLabel();
        findComboBox = new javax.swing.JComboBox<>();
        findToolBar = new javax.swing.JToolBar();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        matchCaseToggleButton = new javax.swing.JToggleButton();
        showMatchesToggleButton = new javax.swing.JToggleButton();
        separator1 = new javax.swing.JToolBar.Separator();
        optionsButton = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();
        closeToolBar = new javax.swing.JToolBar();
        closeButton = new javax.swing.JButton();
        replacePanel = new javax.swing.JPanel();
        replaceLabel = new javax.swing.JLabel();
        replaceComboBox = new javax.swing.JComboBox<>();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        topSeparator.setName("topSeparator"); // NOI18N
        add(topSeparator, java.awt.BorderLayout.NORTH);

        findPanel.setName("findPanel"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/exbin/framework/deltahex/panel/resources/HexStatusPanel"); // NOI18N
        findLabel.setText(bundle.getString("FindTextPanel.findLabel.text")); // NOI18N
        findLabel.setName("findLabel"); // NOI18N

        findComboBox.setEditable(true);
        findComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        findComboBox.setSelectedItem("");
        findComboBox.setName("findComboBox"); // NOI18N

        findToolBar.setBorder(null);
        findToolBar.setFloatable(false);
        findToolBar.setRollover(true);
        findToolBar.setName("findToolBar"); // NOI18N

        prevButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exbin/framework/deltahex/resources/icons/open_icon_library/icons/png/16x16/actions/arrow-left.png"))); // NOI18N
        prevButton.setEnabled(false);
        prevButton.setFocusable(false);
        prevButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        prevButton.setName("prevButton"); // NOI18N
        prevButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        findToolBar.add(prevButton);

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exbin/framework/deltahex/resources/icons/open_icon_library/icons/png/16x16/actions/arrow-right.png"))); // NOI18N
        nextButton.setEnabled(false);
        nextButton.setFocusable(false);
        nextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextButton.setName("nextButton"); // NOI18N
        nextButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        findToolBar.add(nextButton);

        matchCaseToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exbin/framework/deltahex/resources/icons/case_sensitive.gif"))); // NOI18N
        matchCaseToggleButton.setFocusable(false);
        matchCaseToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        matchCaseToggleButton.setName("matchCaseToggleButton"); // NOI18N
        matchCaseToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        findToolBar.add(matchCaseToggleButton);

        showMatchesToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exbin/framework/deltahex/resources/icons/mark_occurrences.png"))); // NOI18N
        showMatchesToggleButton.setFocusable(false);
        showMatchesToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showMatchesToggleButton.setName("showMatchesToggleButton"); // NOI18N
        showMatchesToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        findToolBar.add(showMatchesToggleButton);

        separator1.setName("separator1"); // NOI18N
        findToolBar.add(separator1);

        optionsButton.setText(bundle.getString("FindTextPanel.optionsButton.text")); // NOI18N
        optionsButton.setFocusable(false);
        optionsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        optionsButton.setName("optionsButton"); // NOI18N
        optionsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        optionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsButtonActionPerformed(evt);
            }
        });
        findToolBar.add(optionsButton);

        infoLabel.setEnabled(false);
        infoLabel.setName("infoLabel"); // NOI18N

        closeToolBar.setBorder(null);
        closeToolBar.setFloatable(false);
        closeToolBar.setRollover(true);
        closeToolBar.setName("closeToolBar"); // NOI18N

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exbin/framework/deltahex/resources/icons/open_icon_library/icons/png/16x16/actions/dialog-cancel-3.png"))); // NOI18N
        closeButton.setFocusable(false);
        closeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        closeButton.setName("closeButton"); // NOI18N
        closeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        closeToolBar.add(closeButton);

        javax.swing.GroupLayout findPanelLayout = new javax.swing.GroupLayout(findPanel);
        findPanel.setLayout(findPanelLayout);
        findPanelLayout.setHorizontalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(findLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findComboBox, 0, 360, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        findPanelLayout.setVerticalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(closeToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(findLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addComponent(findComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(findToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        add(findPanel, java.awt.BorderLayout.CENTER);

        replacePanel.setName("replacePanel"); // NOI18N

        replaceLabel.setText(bundle.getString("FindTextPanel.replaceLabel.text")); // NOI18N
        replaceLabel.setName("replaceLabel"); // NOI18N

        replaceComboBox.setEditable(true);
        replaceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        replaceComboBox.setSelectedItem("");
        replaceComboBox.setMinimumSize(new java.awt.Dimension(137, 25));
        replaceComboBox.setName("replaceComboBox"); // NOI18N

        javax.swing.GroupLayout replacePanelLayout = new javax.swing.GroupLayout(replacePanel);
        replacePanel.setLayout(replacePanelLayout);
        replacePanelLayout.setHorizontalGroup(
            replacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(replacePanelLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(replaceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(416, Short.MAX_VALUE))
            .addGroup(replacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(replacePanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(replaceLabel)
                    .addContainerGap(756, Short.MAX_VALUE)))
        );
        replacePanelLayout.setVerticalGroup(
            replacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(replaceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(replacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(replaceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
        );

        add(replacePanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void optionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsButtonActionPerformed
        cancelSearch();
        FindHexDialog findDialog = new FindHexDialog(WindowUtils.getFrame(this), true);
        findDialog.setShallReplace(false);
        findDialog.setSelected();
        findDialog.setLocationRelativeTo(findDialog.getParent());
        findDialog.setVisible(true);
        if (findDialog.getDialogOption() == JOptionPane.OK_OPTION) {
            SearchParameters findParameters = findDialog.getSearchParameters();
            hexPanel.findText(findParameters);
        }
    }//GEN-LAST:event_optionsButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        matchPosition--;
        hexPanel.setMatchPosition(matchPosition);
        setStatus(matchesCount, matchPosition);
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        matchPosition++;
        hexPanel.setMatchPosition(matchPosition);
        setStatus(matchesCount, matchPosition);
    }//GEN-LAST:event_nextButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JToolBar closeToolBar;
    private javax.swing.JComboBox<String> findComboBox;
    private javax.swing.JLabel findLabel;
    private javax.swing.JPanel findPanel;
    private javax.swing.JToolBar findToolBar;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JToggleButton matchCaseToggleButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton optionsButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JComboBox<String> replaceComboBox;
    private javax.swing.JLabel replaceLabel;
    private javax.swing.JPanel replacePanel;
    private javax.swing.JToolBar.Separator separator1;
    private javax.swing.JToggleButton showMatchesToggleButton;
    private javax.swing.JSeparator topSeparator;
    // End of variables declaration//GEN-END:variables

    private void comboBoxValueChanged() {
        String findValue = (String) findComboBox.getEditor().getItem();
        if (searchParameters == null) {
            searchParameters = new SearchParameters();
        }

        if (findValue == null || findValue.isEmpty()) {
            searchParameters.setSearchText(findValue);
            performFind();
            return;
        }

        if (findValue.equals(searchParameters.getSearchText())) {
            return;
        }

        searchParameters.setSearchText(findValue);
        if (searchStartThread != null) {
            searchStartThread.interrupt();
        }
        searchStartThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(1000);
                    if (searchThread != null) {
                        searchThread.interrupt();
                    }
                    searchThread = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            performFind();
                        }
                    });
                    searchThread.start();
                } catch (InterruptedException ex) {
                    // don't search
                }
            }
        });
        searchStartThread.start();
    }

    public void addCloseListener(java.awt.event.ActionListener actionListener) {
        closeButton.addActionListener(actionListener);
    }

    public void setRequestFocus() {
        findComboBox.requestFocus();
    }

    public void cancelSearch() {
        if (searchThread != null) {
            searchThread.interrupt();
        }
    }

    public void performFind() {
        hexPanel.findText(searchParameters);
    }

    public void setStatus(int matchesCount, int matchPosition) {
        this.matchesCount = matchesCount;
        this.matchPosition = matchPosition;
        if (matchesCount == 0) {
            infoLabel.setText("No matches found");
        } else if (matchesCount == 1) {
            infoLabel.setText("Single match found");
        } else {
            infoLabel.setText("Match " + (matchPosition + 1) + " of " + matchesCount);
            updateTraverseButtons();
        }
        updateTraverseButtons();
    }

    public void clearStatus() {
        infoLabel.setText("");
    }

    private void updateTraverseButtons() {
        prevButton.setEnabled(matchesCount > 1 && matchPosition > 0);
        nextButton.setEnabled(matchPosition < matchesCount - 1);
    }
}
