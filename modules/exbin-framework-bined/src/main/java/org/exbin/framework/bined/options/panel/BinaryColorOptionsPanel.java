/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.bined.options.panel;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.prefs.Preferences;
import org.exbin.framework.bined.preferences.panel.ColorProfilesPanel;
import org.exbin.framework.gui.options.api.OptionsPanel;
import org.exbin.framework.gui.options.api.OptionsPanel.ModifiedOptionListener;
import org.exbin.framework.gui.options.api.OptionsPanel.PathItem;
import org.exbin.framework.gui.utils.LanguageUtils;
import org.exbin.framework.gui.utils.WindowUtils;

/**
 * Color options panel.
 *
 * @version 0.2.0 2019/03/01
 * @author ExBin Project (http://exbin.org)
 */
public class BinaryColorOptionsPanel extends javax.swing.JPanel implements OptionsPanel {

    private ModifiedOptionListener modifiedOptionListener;
    private final ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(BinaryColorOptionsPanel.class);
    private BinaryColorPanelApi panelApi;
    private final ColorProfilesPanel profilesPanel;

    public BinaryColorOptionsPanel() {
        initComponents();

        profilesPanel = new ColorProfilesPanel();
        profilesPanel.setEnabled(false);
        BinaryColorOptionsPanel.this.add(profilesPanel, BorderLayout.CENTER);
    }

    public void setPanelApi(BinaryColorPanelApi panelApi) {
        this.panelApi = panelApi;
// TODO        profilesPanel.setPanelApi(panelApi);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        defaultColorPanel = new javax.swing.JPanel();
        defaultProfileLabel = new javax.swing.JLabel();
        defaultProfileComboBox = new javax.swing.JComboBox();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        defaultColorPanel.setName("defaultColorPanel"); // NOI18N

        defaultProfileLabel.setText(resourceBundle.getString("defaultProfileLabel.text")); // NOI18N
        defaultProfileLabel.setName("defaultProfileLabel"); // NOI18N

        defaultProfileComboBox.setName("defaultProfileComboBox"); // NOI18N
        defaultProfileComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                defaultProfileComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout defaultColorPanelLayout = new javax.swing.GroupLayout(defaultColorPanel);
        defaultColorPanel.setLayout(defaultColorPanelLayout);
        defaultColorPanelLayout.setHorizontalGroup(
            defaultColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultColorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(defaultColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(defaultColorPanelLayout.createSequentialGroup()
                        .addComponent(defaultProfileComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(defaultColorPanelLayout.createSequentialGroup()
                        .addComponent(defaultProfileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(385, 385, 385))))
        );
        defaultColorPanelLayout.setVerticalGroup(
            defaultColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultColorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultProfileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defaultProfileComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(defaultColorPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void defaultProfileComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_defaultProfileComboBoxItemStateChanged
        setModified(true);
    }//GEN-LAST:event_defaultProfileComboBoxItemStateChanged

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new BinaryColorOptionsPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel defaultColorPanel;
    private javax.swing.JComboBox defaultProfileComboBox;
    private javax.swing.JLabel defaultProfileLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<OptionsPanel.PathItem> getPath() {
        ArrayList<OptionsPanel.PathItem> path = new ArrayList<>();
        path.add(new PathItem("apperance", ""));
        path.add(new PathItem("colors", resourceBundle.getString("options.Path.0")));
        return path;
    }

    @Override
    public void loadFromPreferences(Preferences preferences) {
//        Boolean defaultColor = Boolean.valueOf(preferences.get(PREFERENCES_TEXT_COLOR_DEFAULT, Boolean.toString(true)));
//        profilesPanel.loadFromPreferences(preferences);
    }

    @Override
    public void saveToPreferences(Preferences preferences) {
//        profilesPanel.saveToPreferences(preferences);
//        preferences.put(PREFERENCES_TEXT_COLOR_DEFAULT, Boolean.toString(defaultColorCheckBox.isSelected()));
    }

    @Override
    public void applyPreferencesChanges() {
//        if (defaultColorCheckBox.isSelected()) {
//            panelApi.setCurrentTextColors(panelApi.getDefaultTextColors());
//        } else {
//            profilesPanel.applyPreferencesChanges();
//        }
    }

    private void setModified(boolean b) {
        if (modifiedOptionListener != null) {
            modifiedOptionListener.wasModified();
        }
    }

    @Override
    public void setModifiedOptionListener(ModifiedOptionListener listener) {
        modifiedOptionListener = listener;
//        profilesPanel.setModifiedOptionListener(listener);
    }
}
