/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.gui.service.catalog.panel;

import java.util.ResourceBundle;
import javax.swing.JPanel;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.gui.frame.api.GuiFrameModuleApi;
import org.exbin.framework.gui.utils.LanguageUtils;
import org.exbin.framework.gui.utils.WindowUtils;
import org.exbin.framework.gui.utils.WindowUtils.DialogWrapper;
import org.exbin.framework.gui.utils.handler.DefaultControlHandler;
import org.exbin.framework.gui.utils.panel.DefaultControlPanel;
import org.exbin.xbup.core.block.definition.XBParamType;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCBlockSpec;
import org.exbin.xbup.core.catalog.base.XBCFormatSpec;
import org.exbin.xbup.core.catalog.base.XBCGroupSpec;
import org.exbin.xbup.core.catalog.base.XBCRev;
import org.exbin.xbup.core.catalog.base.XBCSpec;
import org.exbin.xbup.core.catalog.base.service.XBCXNameService;

/**
 * Catalog specification definition editor panel.
 *
 * @version 0.2.1 2019/06/27
 * @author ExBin Project (http://exbin.org)
 */
public class CatalogSpecDefEditorPanel extends javax.swing.JPanel {

    private XBApplication application;
    private XBACatalog catalog;

    private XBCSpec spec;
    private CatalogDefsTableItem defItem;
    private CatalogSpecItemType targetType = CatalogSpecItemType.BLOCK;
    private XBCRev targetRev = null;

    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(CatalogSpecDefEditorPanel.class);

    public CatalogSpecDefEditorPanel() {
        initComponents();
    }

    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    public void setApplication(XBApplication application) {
        this.application = application;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        operationLabel = new javax.swing.JLabel();
        operationComboBox = new javax.swing.JComboBox();
        definitionTargetLabel = new javax.swing.JLabel();
        definitionTargetTextField = new javax.swing.JTextField();
        selectTargetButton = new javax.swing.JButton();
        stringIdLabel = new javax.swing.JLabel();
        stringIdTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        descriptionTextField = new javax.swing.JTextField();

        operationLabel.setText(resourceBundle.getString("operationLabel.text")); // NOI18N

        operationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Consist", "Join" }));
        operationComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                operationComboBoxItemStateChanged(evt);
            }
        });

        definitionTargetLabel.setText("Target Type");

        definitionTargetTextField.setEditable(false);

        selectTargetButton.setText("Select...");
        selectTargetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTargetButtonActionPerformed(evt);
            }
        });

        stringIdLabel.setText("String Id");

        nameLabel.setText("Name");

        descriptionLabel.setText("Description");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operationComboBox, 0, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(definitionTargetTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectTargetButton))
                    .addComponent(stringIdTextField)
                    .addComponent(nameTextField)
                    .addComponent(descriptionTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(operationLabel)
                            .addComponent(definitionTargetLabel)
                            .addComponent(stringIdLabel)
                            .addComponent(nameLabel)
                            .addComponent(descriptionLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(operationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(definitionTargetLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(definitionTargetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectTargetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stringIdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stringIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void operationComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_operationComboBoxItemStateChanged
        updateSpecDefType();
    }//GEN-LAST:event_operationComboBoxItemStateChanged

    private void selectTargetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTargetButtonActionPerformed
        GuiFrameModuleApi frameModule = application.getModuleRepository().getModuleByInterface(GuiFrameModuleApi.class);
        CatalogSelectRevPanel panel = new CatalogSelectRevPanel(catalog, targetType);
        panel.setApplication(application);
        DefaultControlPanel controlPanel = new DefaultControlPanel();
        JPanel dialogPanel = WindowUtils.createDialogPanel(panel, controlPanel);
        final DialogWrapper dialog = frameModule.createDialog(dialogPanel);
        frameModule.setDialogTitle(dialog, panel.getResourceBundle());
        controlPanel.setHandler((DefaultControlHandler.ControlActionType actionType) -> {
            if (actionType == DefaultControlHandler.ControlActionType.OK) {
                setTargetRev(panel.getTarget());
            }
            dialog.close();
        });
        WindowUtils.assignGlobalKeyListener(dialog.getWindow(), controlPanel.createOkCancelListener());
        dialog.center(dialog.getParent());
        dialog.show();
    }//GEN-LAST:event_selectTargetButtonActionPerformed

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new CatalogSpecDefEditorPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel definitionTargetLabel;
    private javax.swing.JTextField definitionTargetTextField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JComboBox operationComboBox;
    private javax.swing.JLabel operationLabel;
    private javax.swing.JButton selectTargetButton;
    private javax.swing.JLabel stringIdLabel;
    private javax.swing.JTextField stringIdTextField;
    // End of variables declaration//GEN-END:variables

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;
    }

    public void setSpec(XBCSpec spec) {
        this.spec = spec;
        if (spec instanceof XBCBlockSpec) {
            operationComboBox.setModel(new javax.swing.DefaultComboBoxModel(CatalogDefOperationType.getAsArray()));
            switchSpecDefType(CatalogSpecItemType.BLOCK);
        } else {
            operationComboBox.setModel(new javax.swing.DefaultComboBoxModel(CatalogDefOperationType.getAsArray(2)));
            if (spec instanceof XBCGroupSpec) {
                switchSpecDefType(CatalogSpecItemType.BLOCK);
            } else {
                switchSpecDefType(CatalogSpecItemType.GROUP);
            }
        }
    }

    public XBACatalog getCatalog() {
        return catalog;
    }

    public CatalogDefsTableItem getDefItem() {
        String operationCaption = (String) operationComboBox.getModel().getSelectedItem();
        XBCRev target = targetRev;

        CatalogDefOperationType operation = getOperation();
        if (target == null && getOperationRequireTarget(operation)) {
            return null;
        }

        defItem.setName(nameTextField.getText());
        defItem.setDescription(descriptionTextField.getText());
        defItem.setStringId(stringIdTextField.getText());
        defItem.setDefType(getSpecDefType());
        defItem.setOperation(operationCaption);
        defItem.setTarget(target);

        XBCXNameService nameService = (XBCXNameService) catalog.getCatalogService(XBCXNameService.class);
        defItem.setType(target != null ? nameService.getDefaultText(target.getParent()) : null);
        defItem.setTargetRevision(target != null ? target.getXBIndex() : null);

        return defItem;
    }

    public void setDefItem(CatalogDefsTableItem defItem) {
        this.defItem = defItem;

        nameTextField.setText(defItem.getName());
        descriptionTextField.setText(defItem.getDescription());
        stringIdTextField.setText(defItem.getStringId());

        if (defItem.getDefType() == null) {
            defItem.setDefType(getSpecDefType());
        }

        CatalogDefOperationType operation = CatalogDefOperationType.CONSIST;
        switch (defItem.getDefType()) {
            case CONSIST: {
                operation = (defItem.getTarget() == null) && (spec instanceof XBCBlockSpec)
                        ? CatalogDefOperationType.ANY : CatalogDefOperationType.CONSIST;
                break;
            }
            case JOIN: {
                operation = (defItem.getTarget() == null) && (spec instanceof XBCBlockSpec)
                        ? CatalogDefOperationType.ATTRIBUTE : CatalogDefOperationType.JOIN;
                break;
            }
            case LIST_CONSIST: {
                operation = (defItem.getTarget() == null)
                        ? CatalogDefOperationType.ANY_LIST : CatalogDefOperationType.CONSIST_LIST;
                break;
            }
            case LIST_JOIN: {
                operation = (defItem.getTarget() == null)
                        ? CatalogDefOperationType.ATTRIBUTE_LIST : CatalogDefOperationType.JOIN_LIST;
                break;
            }
        }
        operationComboBox.setSelectedIndex(operation.getRowIndex());

        updateSpecDefType();
        setTargetRev(defItem.getTarget());
    }

    public XBParamType getSpecDefType() {
        if (spec instanceof XBCBlockSpec) {
            switch (getOperation()) {
                case CONSIST:
                    return XBParamType.CONSIST;
                case JOIN:
                    return XBParamType.JOIN;
                case ANY:
                    return XBParamType.CONSIST;
                case ATTRIBUTE:
                    return XBParamType.JOIN;
                case CONSIST_LIST:
                    return XBParamType.LIST_CONSIST;
                case JOIN_LIST:
                    return XBParamType.LIST_JOIN;
                case ANY_LIST:
                    return XBParamType.LIST_CONSIST;
                case ATTRIBUTE_LIST:
                    return XBParamType.LIST_JOIN;
                default:
                    return XBParamType.CONSIST;
            }
        } else {
            if (getOperation() == CatalogDefOperationType.CONSIST) {
                return XBParamType.CONSIST;
            } else {
                return XBParamType.JOIN;
            }
        }
    }

    private void switchSpecDefType(CatalogSpecItemType newType) {
        definitionTargetTextField.setText("");
        targetType = newType;
        targetRev = null;
    }

    private void updateSpecDefType() {
        CatalogDefOperationType operation = getOperation();
        if (spec instanceof XBCBlockSpec) {
            if (!getOperationRequireTarget(operation)) {
                // Used to clear target type value
                switchSpecDefType(CatalogSpecItemType.BLOCK);
            }
        } else if (spec instanceof XBCGroupSpec) {
            if (operation == CatalogDefOperationType.CONSIST) {
                switchSpecDefType(CatalogSpecItemType.BLOCK);
            } else {
                switchSpecDefType(CatalogSpecItemType.GROUP);
            }
        } else if (spec instanceof XBCFormatSpec) {
            if (operation == CatalogDefOperationType.CONSIST) {
                switchSpecDefType(CatalogSpecItemType.GROUP);
            } else {
                switchSpecDefType(CatalogSpecItemType.FORMAT);
            }
        }

        if (spec instanceof XBCBlockSpec) {
            selectTargetButton.setEnabled(getOperationRequireTarget(operation));
        } else {
            selectTargetButton.setEnabled(true);
        }
    }

    private void setTargetRev(XBCRev targetRev) {
        this.targetRev = targetRev;
        if (targetRev != null) {
            XBCXNameService nameService = (XBCXNameService) catalog.getCatalogService(XBCXNameService.class);
            String targetCaption = nameService.getItemNamePath(targetRev.getParent());
            if (targetCaption == null) {
                targetCaption = "";
            } else {
                targetCaption += " ";
            }
            targetCaption += "(" + Long.toString(targetRev.getParent().getId()) + ")";
            definitionTargetTextField.setText(targetCaption);

        } else {
            definitionTargetTextField.setText("");
        }
    }

    private CatalogDefOperationType getOperation() {
        return CatalogDefOperationType.valueOf(operationComboBox.getSelectedIndex());
    }

    private boolean getOperationRequireTarget(CatalogDefOperationType operation) {
        return (operation == CatalogDefOperationType.CONSIST)
                || (operation == CatalogDefOperationType.JOIN)
                || (operation == CatalogDefOperationType.CONSIST_LIST)
                || (operation == CatalogDefOperationType.JOIN_LIST);
    }
}
