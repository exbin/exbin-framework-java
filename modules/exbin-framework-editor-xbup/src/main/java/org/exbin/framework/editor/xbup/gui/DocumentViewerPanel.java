/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.xbup.gui;

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.JComponent;

/**
 * Document viewer panel.
 *
 * @version 0.2.1 2020/03/13
 * @author ExBin Project (http://exbin.org)
 */
@ParametersAreNonnullByDefault
public class DocumentViewerPanel extends javax.swing.JPanel {

    private final List<ViewRecord> viewRecords = new ArrayList<>();
    private int activeView = 0;

    public DocumentViewerPanel() {
        initComponents();
        init();
    }

    private void init() {
        modeComboBox.addItemListener((ItemEvent e) -> {
            int selectedIndex = modeComboBox.getSelectedIndex();
            if (selectedIndex >= 0) {
                ViewRecord prevRecord = viewRecords.get(activeView);
                remove(prevRecord.component);
                ViewRecord record = viewRecords.get(selectedIndex);
                add(record.component, BorderLayout.CENTER);
                activeView = selectedIndex;
            }
        });
    }

    public void addView(String name, JComponent component) {
        if (viewRecords.isEmpty()) {
            add(component, BorderLayout.CENTER);
        }

        viewRecords.add(new ViewRecord(name, component));
        modeComboBox.addItem(name);
    }

    public void removeAllViews() {
        if (!viewRecords.isEmpty()) {
            ViewRecord prevRecord = viewRecords.get(activeView);
            remove(prevRecord.component);
            modeComboBox.removeAllItems();
            viewRecords.clear();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeComboBox = new javax.swing.JComboBox<>();

        setLayout(new java.awt.BorderLayout());
        add(modeComboBox, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> modeComboBox;
    // End of variables declaration//GEN-END:variables

    private static final class ViewRecord {

        public ViewRecord(String name, JComponent component) {
            this.name = name;
            this.component = component;
        }

        String name;
        JComponent component;
    }
}
