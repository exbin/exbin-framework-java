/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.editor.xbup.panel;

import java.awt.CardLayout;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.gui.frame.api.GuiFrameModuleApi;
import org.exbin.framework.gui.service.catalog.panel.CatalogSelectRevPanel;
import org.exbin.framework.gui.service.catalog.panel.CatalogSpecItemType;
import org.exbin.framework.gui.utils.LanguageUtils;
import org.exbin.framework.gui.utils.WindowUtils;
import org.exbin.framework.gui.utils.WindowUtils.DialogWrapper;
import org.exbin.framework.gui.utils.handler.DefaultControlHandler;
import org.exbin.framework.gui.utils.panel.DefaultControlPanel;
import org.exbin.xbup.core.block.XBBlockType;
import org.exbin.xbup.core.block.declaration.XBBlockDecl;
import org.exbin.xbup.core.block.declaration.XBDeclBlockType;
import org.exbin.xbup.core.block.declaration.catalog.XBCBlockDecl;
import org.exbin.xbup.core.block.declaration.catalog.XBCGroupDecl;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCBlockRev;
import org.exbin.xbup.core.catalog.base.XBCBlockSpec;
import org.exbin.xbup.core.catalog.base.XBCRev;
import org.exbin.xbup.core.catalog.base.service.XBCXNameService;
import org.exbin.xbup.parser_tree.XBTTreeNode;

/**
 * Panel for adding new item into given document.
 *
 * @version 0.2.1 2019/06/25
 * @author ExBin Project (http://exbin.org)
 */
public class AddBlockPanel extends javax.swing.JPanel {

    private XBApplication application;

    private XBTTreeNode parentNode;
    private XBTTreeNode workNode = null;
    private XBACatalog catalog;
    private XBBlockType contextBlockType = null;
    private XBBlockType catalogBlockType = null;
    private ActionStateListener actionStateListener = null;
    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(AddBlockPanel.class);

    public AddBlockPanel() {
        initComponents();
        init();
    }

    private void init() {
        reloadBasicTypes();
        ((CardLayout) getLayout()).show(this, "type");
    }

    public void setApplication(XBApplication application) {
        this.application = application;
    }

    public void setActionStateListener(ActionStateListener listener) {
        this.actionStateListener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typePanel = new javax.swing.JPanel();
        dataRadioButton = new javax.swing.JRadioButton();
        basicTypeRadioButton = new javax.swing.JRadioButton();
        basicTypeComboBox = new javax.swing.JComboBox<>();
        contextTypeRadioButton = new javax.swing.JRadioButton();
        contextTypeSelectButton = new javax.swing.JButton();
        contextTypeTextField = new javax.swing.JTextField();
        catalogTypeRadioButton = new javax.swing.JRadioButton();
        catalogTypeSelectButton = new javax.swing.JButton();
        catalogTypeTextField = new javax.swing.JTextField();
        conditionsPanel = new javax.swing.JPanel();
        generateDeclarationCheckBox = new javax.swing.JCheckBox();
        prefillCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.CardLayout());

        typePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("typePanel.border.title"))); // NOI18N

        dataRadioButton.setText(resourceBundle.getString("dataRadioButton.text")); // NOI18N
        dataRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        basicTypeRadioButton.setSelected(true);
        basicTypeRadioButton.setText(resourceBundle.getString("basicTypeRadioButton.text")); // NOI18N
        basicTypeRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        basicTypeRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                basicTypeRadioButtonStateChanged(evt);
            }
        });

        contextTypeRadioButton.setText(resourceBundle.getString("contextTypeRadioButton.text")); // NOI18N
        contextTypeRadioButton.setEnabled(false);
        contextTypeRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contextTypeRadioButtonStateChanged(evt);
            }
        });

        contextTypeSelectButton.setText(resourceBundle.getString("contextTypeSelectButton.text")); // NOI18N
        contextTypeSelectButton.setEnabled(false);
        contextTypeSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contextTypeSelectButtonActionPerformed(evt);
            }
        });

        contextTypeTextField.setEditable(false);

        catalogTypeRadioButton.setText(resourceBundle.getString("catalogTypeRadioButton.text")); // NOI18N
        catalogTypeRadioButton.setEnabled(false);
        catalogTypeRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                catalogTypeRadioButtonStateChanged(evt);
            }
        });

        catalogTypeSelectButton.setText(resourceBundle.getString("catalogTypeSelectButton.text")); // NOI18N
        catalogTypeSelectButton.setEnabled(false);
        catalogTypeSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catalogTypeSelectButtonActionPerformed(evt);
            }
        });

        catalogTypeTextField.setEditable(false);
        catalogTypeTextField.setEnabled(false);

        javax.swing.GroupLayout typePanelLayout = new javax.swing.GroupLayout(typePanel);
        typePanel.setLayout(typePanelLayout);
        typePanelLayout.setHorizontalGroup(
            typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, typePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(contextTypeRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(catalogTypeRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addComponent(dataRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(basicTypeRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(typePanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(catalogTypeTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(catalogTypeSelectButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, typePanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(basicTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, typePanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(contextTypeTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contextTypeSelectButton)))
                .addContainerGap())
        );
        typePanelLayout.setVerticalGroup(
            typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(basicTypeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(basicTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contextTypeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contextTypeSelectButton)
                    .addComponent(contextTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(catalogTypeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(catalogTypeSelectButton)
                    .addComponent(catalogTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(typePanel, "type");

        generateDeclarationCheckBox.setSelected(true);
        generateDeclarationCheckBox.setText(resourceBundle.getString("generateDeclarationCheckBox.text")); // NOI18N

        prefillCheckBox.setText(resourceBundle.getString("prefillCheckBox.text")); // NOI18N
        prefillCheckBox.setEnabled(false);

        javax.swing.GroupLayout conditionsPanelLayout = new javax.swing.GroupLayout(conditionsPanel);
        conditionsPanel.setLayout(conditionsPanelLayout);
        conditionsPanelLayout.setHorizontalGroup(
            conditionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conditionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conditionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateDeclarationCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(conditionsPanelLayout.createSequentialGroup()
                        .addComponent(prefillCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        conditionsPanelLayout.setVerticalGroup(
            conditionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conditionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generateDeclarationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prefillCheckBox)
                .addContainerGap(234, Short.MAX_VALUE))
        );

        add(conditionsPanel, "cond");
    }// </editor-fold>//GEN-END:initComponents

    private void basicTypeRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_basicTypeRadioButtonStateChanged
        basicTypeComboBox.setEnabled(basicTypeRadioButton.isSelected());
    }//GEN-LAST:event_basicTypeRadioButtonStateChanged

    private void contextTypeRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contextTypeRadioButtonStateChanged
        contextTypeSelectButton.setEnabled(contextTypeRadioButton.isSelected());
        updateActionState();
    }//GEN-LAST:event_contextTypeRadioButtonStateChanged

    private void contextTypeSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contextTypeSelectButtonActionPerformed
        if (catalog != null) {
            GuiFrameModuleApi frameModule = application.getModuleRepository().getModuleByInterface(GuiFrameModuleApi.class);
            final ContextTypeChoicePanel panel = new ContextTypeChoicePanel(catalog, parentNode);

            DefaultControlPanel controlPanel = new DefaultControlPanel();
            JPanel dialogPanel = WindowUtils.createDialogPanel(panel, controlPanel);
            final DialogWrapper dialog = frameModule.createDialog(dialogPanel);
            controlPanel.setHandler((DefaultControlHandler.ControlActionType actionType) -> {
                switch (actionType) {
                    case OK: {
                        contextBlockType = panel.getBlockType();
                        XBCBlockDecl blockDecl = (XBCBlockDecl) ((XBDeclBlockType) contextBlockType).getBlockDecl();
                        XBCBlockSpec blockSpec = blockDecl.getBlockSpecRev().getParent();
                        //new XBDeclBlockType(new XBCBlockDecl();
                        XBCXNameService nameService = (XBCXNameService) catalog.getCatalogService(XBCXNameService.class);
                        String targetCaption = nameService.getItemNamePath(blockSpec);
                        if (targetCaption == null) {
                            targetCaption = "";
                        } else {
                            targetCaption += " ";
                        }
                        targetCaption += "(" + Long.toString(blockSpec.getId()) + ")";
                        contextTypeTextField.setText(targetCaption);

                        dialog.close();
                        break;
                    }

                    case CANCEL: {
                        dialog.close();
                        break;
                    }
                    default:
                        throw new IllegalStateException("Unexpected action type " + actionType.name());
                }
            });
            WindowUtils.assignGlobalKeyListener(dialog.getWindow(), controlPanel.createOkCancelListener());
            dialog.center(dialog.getParent());
            dialog.show();

//            ContextTypeChoiceDialog contextTypeDialog = new ContextTypeChoiceDialog((Frame) SwingUtilities.getWindowAncestor(this), true, catalog, parentNode);
//            contextTypeDialog.setLocationRelativeTo(this);
//            contextTypeDialog.setVisible(true);
//            if (contextTypeDialog.getDialogOption() == JOptionPane.OK_OPTION) {
//                contextBlockType = contextTypeDialog.getBlockType();
//                XBCBlockDecl blockDecl = (XBCBlockDecl) ((XBDeclBlockType) contextBlockType).getBlockDecl();
//                XBCBlockSpec blockSpec = blockDecl.getBlockSpecRev().getParent();
//                //new XBDeclBlockType(new XBCBlockDecl();
//                XBCXNameService nameService = (XBCXNameService) catalog.getCatalogService(XBCXNameService.class);
//                String targetCaption = nameService.getItemNamePath(blockSpec);
//                if (targetCaption == null) {
//                    targetCaption = "";
//                } else {
//                    targetCaption += " ";
//                }
//                targetCaption += "(" + Long.toString(blockSpec.getId()) + ")";
//                contextTypeTextField.setText(targetCaption);
//            }
        }

        updateActionState();
    }//GEN-LAST:event_contextTypeSelectButtonActionPerformed

    private void catalogTypeRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_catalogTypeRadioButtonStateChanged
        catalogTypeTextField.setEnabled(catalogTypeRadioButton.isSelected());
        catalogTypeSelectButton.setEnabled(catalogTypeRadioButton.isSelected());
        if (actionStateListener != null) {
            actionStateListener.nextEnabled(catalogTypeRadioButton.isSelected());
        }
        updateActionState();
    }//GEN-LAST:event_catalogTypeRadioButtonStateChanged

    private void catalogTypeSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catalogTypeSelectButtonActionPerformed
        if (catalog != null) {
            GuiFrameModuleApi frameModule = application.getModuleRepository().getModuleByInterface(GuiFrameModuleApi.class);
            final CatalogSelectRevPanel panel = new CatalogSelectRevPanel(catalog, CatalogSpecItemType.BLOCK);

            DefaultControlPanel controlPanel = new DefaultControlPanel();
            JPanel dialogPanel = WindowUtils.createDialogPanel(panel, controlPanel);
            final DialogWrapper dialog = frameModule.createDialog(dialogPanel);
            controlPanel.setHandler((DefaultControlHandler.ControlActionType actionType) -> {
                switch (actionType) {
                    case OK: {
                XBCRev blockRev = panel.getTarget();
                catalogBlockType = new XBDeclBlockType(new XBCBlockDecl((XBCBlockRev) blockRev, catalog));
                XBCXNameService nameService = (XBCXNameService) catalog.getCatalogService(XBCXNameService.class
                );
                String targetCaption = nameService.getItemNamePath(blockRev.getParent());
                if (targetCaption == null) {
                    targetCaption = "";
                } else {
                    targetCaption += " ";
                }
                targetCaption += "(" + Long.toString(blockRev.getId()) + ")";
                catalogTypeTextField.setText(targetCaption);

                        dialog.close();
                        break;
                    }

                    case CANCEL: {
                        dialog.close();
                        break;
                    }
                    default:
                        throw new IllegalStateException("Unexpected action type " + actionType.name());
                }
            });
            WindowUtils.assignGlobalKeyListener(dialog.getWindow(), controlPanel.createOkCancelListener());
            dialog.center(dialog.getParent());
            dialog.show();

//            CatalogSelectSpecDialog selectSpecDialog = new CatalogSelectSpecDialog((Frame) SwingUtilities.getWindowAncestor(this), true, catalog, CatalogSpecItemType.BLOCK);
//            selectSpecDialog.setLocationRelativeTo(this);
//            selectSpecDialog.setVisible(true);
//            if (selectSpecDialog.getDialogOption() == JOptionPane.OK_OPTION) {
//                XBCRev blockRev = selectSpecDialog.getTarget();
//                catalogBlockType = new XBDeclBlockType(new XBCBlockDecl((XBCBlockRev) blockRev, catalog));
//                XBCXNameService nameService = (XBCXNameService) catalog.getCatalogService(XBCXNameService.class);
//                String targetCaption = nameService.getItemNamePath(blockRev.getParent());
//                if (targetCaption == null) {
//                    targetCaption = "";
//                } else {
//                    targetCaption += " ";
//                }
//                targetCaption += "(" + Long.toString(blockRev.getId()) + ")";
//                catalogTypeTextField.setText(targetCaption);
//            }
        }

        updateActionState();
    }//GEN-LAST:event_catalogTypeSelectButtonActionPerformed

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new AddBlockPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> basicTypeComboBox;
    private javax.swing.JRadioButton basicTypeRadioButton;
    private javax.swing.JRadioButton catalogTypeRadioButton;
    private javax.swing.JButton catalogTypeSelectButton;
    private javax.swing.JTextField catalogTypeTextField;
    private javax.swing.JPanel conditionsPanel;
    private javax.swing.JRadioButton contextTypeRadioButton;
    private javax.swing.JButton contextTypeSelectButton;
    private javax.swing.JTextField contextTypeTextField;
    private javax.swing.JRadioButton dataRadioButton;
    private javax.swing.JCheckBox generateDeclarationCheckBox;
    private javax.swing.JCheckBox prefillCheckBox;
    private javax.swing.JPanel typePanel;
    // End of variables declaration//GEN-END:variables

    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    public XBTTreeNode getWorkNode() {
        return workNode;
    }

    public void setWorkNode(XBTTreeNode workNode) {
        this.workNode = workNode;
    }

    private void updateActionState() {
        if (actionStateListener != null) {
            actionStateListener.finishEnabled(
                    !(contextTypeRadioButton.isSelected() || catalogTypeRadioButton.isSelected())
                    || (contextBlockType != null && contextTypeRadioButton.isSelected())
                    || (catalogBlockType != null && catalogTypeRadioButton.isSelected()));
        }
    }

    public void setParentNode(XBTTreeNode parentNode) {
        this.parentNode = parentNode;
        contextTypeRadioButton.setEnabled(parentNode != null && parentNode.getContext().getGroupsCount() > 1);
    }

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;
        reloadBasicTypes();
        fireCatalogUpdate();
    }

    private void fireCatalogUpdate() {
        catalogTypeRadioButton.setEnabled(catalog != null);
    }

    private void reloadBasicTypes() {
        DefaultComboBoxModel<String> model = (DefaultComboBoxModel) basicTypeComboBox.getModel();
        model.removeAllElements();
        if (catalog != null) {
            Long[] basicGroupPath = {0l, 0l};
            List<XBBlockDecl> list = catalog.getBlocks(((XBCGroupDecl) catalog.findGroupTypeByPath(basicGroupPath, 0)).getGroupSpecRev().getParent());

            XBCXNameService nameService = (XBCXNameService) catalog.getCatalogService(XBCXNameService.class
            );
            for (XBBlockDecl decl : list) {
                model.addElement(nameService.getDefaultText(((XBCBlockDecl) decl).getBlockSpecRev().getParent()));
            }
        }
    }

    public interface ActionStateListener {

        void finishEnabled(boolean enablement);

        void nextEnabled(boolean enablement);
    }
}
