/*
 * Copyright (C) ExBin Project
 *
 * This application or library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * This application or library is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along this application.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.exbin.framework.editor.xbup.panel;

import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.event.TreeSelectionEvent;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.gui.utils.ClipboardActionsUpdateListener;
import org.exbin.framework.gui.utils.LanguageUtils;
import org.exbin.framework.gui.utils.WindowUtils;
import org.exbin.xbup.core.block.XBTBlock;
import org.exbin.xbup.operation.undo.XBUndoHandler;
import org.exbin.xbup.parser_tree.XBTTreeNode;
import org.exbin.xbup.plugin.XBPluginRepository;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.parser_tree.XBTTreeDocument;

/**
 * Panel for document visualization.
 *
 * @version 0.2.1 2020/03/03
 * @author ExBin Project (http://exbin.org)
 */
public class XBDocumentPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(XBDocumentPanel.class);

    private boolean showPropertiesPanel = false;

    private final XBDocTreePanel treePanel;

    private XBPropertyPanel propertyPanel;
    private XBPluginRepository pluginRepository;
    private ClipboardActionsUpdateListener clipboardActionsUpdateListener;

    public XBDocumentPanel() {

        initComponents();

        propertyPanel = new XBPropertyPanel();
        mainSplitPane.setRightComponent(propertyPanel);

        treePanel = new XBDocTreePanel();

        ((JPanel) mainTabbedPane.getComponentAt(0)).add(treePanel, java.awt.BorderLayout.CENTER);

        mainSplitPane.setLeftComponent(treePanel);
        mainSplitPane.setRightComponent(mainTabbedPane);
        setShowPropertiesPanel(true);
        //updateItem();

//        propertiesTabPanel.add(propertiesViewer.getComponent(), BorderLayout.CENTER);
//        textTabPanel.add(textViewer.getComponent(), BorderLayout.CENTER);
//        binaryTabPanel.add(binaryViewer.getComponent(), BorderLayout.CENTER);
    }

    public void setApplication(XBApplication application) {
        treePanel.setApplication(application);
        propertyPanel.setApplication(application);
    }

    public void setCatalog(XBACatalog catalog) {
//        this.catalog = catalog;
        treePanel.setCatalog(catalog);
        propertyPanel.setCatalog(catalog);
        treePanel.setCatalog(catalog);
        propertyPanel.setCatalog(catalog);
    }

    public void setUndoHandler(XBUndoHandler undoHandler) {
        treePanel.setUndoHandler(undoHandler);
    }

    public void setUpdateListener(ClipboardActionsUpdateListener updateListener) {
        clipboardActionsUpdateListener = updateListener;

        treePanel.setUpdateListener(updateListener);
    }

    public void postWindowOpened() {
        mainSplitPane.setDividerLocation(getWidth() - 300 > 0 ? getWidth() - 300 : getWidth() / 3);
    }

    /**
     * Updating selected item available operations status, like add, edit,
     * delete.
     */
    public void updateItem() {
        treePanel.updateItemStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        popupItemViewMenuItem = new javax.swing.JMenuItem();
        popupItemCopyMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        popupItemPropertiesMenuItem = new javax.swing.JMenuItem();
        viewSplitPane = new javax.swing.JSplitPane();
        mainTabbedPane = new javax.swing.JTabbedPane();
        propertiesTabPanel = new javax.swing.JPanel();
        textTabPanel = new javax.swing.JPanel();
        binaryTabPanel = new javax.swing.JPanel();
        mainSplitPane = new javax.swing.JSplitPane();

        popupItemViewMenuItem.setText(resourceBundle.getString("popupItemViewMenuItem.text")); // NOI18N
        popupItemViewMenuItem.setToolTipText(resourceBundle.getString("popupItemViewMenuItem.toolTipText")); // NOI18N
        popupItemViewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupItemViewMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(popupItemViewMenuItem);

        popupItemCopyMenuItem.setText(resourceBundle.getString("popupItemCopyMenuItem.text")); // NOI18N
        popupItemCopyMenuItem.setToolTipText(resourceBundle.getString("popupItemCopyMenuItem.toolTipText")); // NOI18N
        popupItemCopyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupItemCopyMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(popupItemCopyMenuItem);
        popupMenu.add(jSeparator1);

        popupItemPropertiesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.ALT_MASK));
        popupItemPropertiesMenuItem.setText(resourceBundle.getString("popupItemPropertiesMenuItem.text")); // NOI18N
        popupItemPropertiesMenuItem.setToolTipText(resourceBundle.getString("popupItemPropertiesMenuItem.toolTipText")); // NOI18N
        popupItemPropertiesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupItemPropertiesMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(popupItemPropertiesMenuItem);

        viewSplitPane.setDividerLocation(250);
        viewSplitPane.setResizeWeight(1.0);

        mainTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPaneStateChanged(evt);
            }
        });

        propertiesTabPanel.setLayout(new java.awt.BorderLayout());
        mainTabbedPane.addTab("Properties", propertiesTabPanel);

        textTabPanel.setLayout(new java.awt.BorderLayout());
        mainTabbedPane.addTab("Text", textTabPanel);

        binaryTabPanel.setLayout(new java.awt.BorderLayout());
        mainTabbedPane.addTab("Binary", binaryTabPanel);

        setLayout(new java.awt.BorderLayout());

        mainSplitPane.setBorder(null);
        mainSplitPane.setDividerLocation(200);
        add(mainSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void popupItemPropertiesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupItemPropertiesMenuItemActionPerformed
        throw new UnsupportedOperationException("Not supported yet.");
        // actionItemProperties();
    }//GEN-LAST:event_popupItemPropertiesMenuItemActionPerformed

    private void popupItemViewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupItemViewMenuItemActionPerformed
        throw new UnsupportedOperationException("Not supported yet.");
        // performModify();
    }//GEN-LAST:event_popupItemViewMenuItemActionPerformed

    private void popupItemCopyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupItemCopyMenuItemActionPerformed
        throw new UnsupportedOperationException("Not supported yet.");
        // performCopy();
    }//GEN-LAST:event_popupItemCopyMenuItemActionPerformed

    private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
//        throw new UnsupportedOperationException("Not supported yet.");
        // updateActiveViewer();
//        JComponent viewerComponent = activeViewer.getComponent();
//        viewerComponent.requestFocus();
//        mainTabbedPane.setSelectedComponent(viewerComponent);

//        mainTabbedPane.addT  setTabComponentAt(mainTabbedPane.getSelectedIndex(), viewerComponent);
        // setMode(PanelMode.values()[mainTabbedPane.getSelectedIndex()]);
    }//GEN-LAST:event_mainTabbedPaneStateChanged

    public XBTTreeNode getSelectedItem() {
        return treePanel.getSelectedItem();
    }

    public void reportStructureChange(XBTBlock block) {
        treePanel.reportStructureChange(block);
    }

    public boolean isPasteEnabled() {
        return treePanel.isPasteEnabled();
    }

    public void addUpdateListener(ActionListener tml) {
        treePanel.addUpdateListener(tml);
    }

    public void removeUpdateListener(ActionListener tml) {
        treePanel.removeUpdateListener(tml);
    }

    public void performAdd() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void showPanel() {
        throw new UnsupportedOperationException("Not supported yet.");
//        int index = getMode().ordinal();
//        mainTabbedPane.setSelectedIndex(index);
//        ((JPanel) mainTabbedPane.getComponentAt(index)).add(getPanel(index));
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new XBDocumentPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel binaryTabPanel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuItem popupItemCopyMenuItem;
    private javax.swing.JMenuItem popupItemPropertiesMenuItem;
    private javax.swing.JMenuItem popupItemViewMenuItem;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JPanel propertiesTabPanel;
    private javax.swing.JPanel textTabPanel;
    private javax.swing.JSplitPane viewSplitPane;
    // End of variables declaration//GEN-END:variables

    public void setEditEnabled(boolean editEnabled) {
        treePanel.setEditEnabled(editEnabled);
    }

    public void setAddEnabled(boolean addEnabled) {
        treePanel.setAddEnabled(addEnabled);
    }

    public void updateUndoAvailable() {
        firePropertyChange("undoAvailable", false, true);
        firePropertyChange("redoAvailable", false, true);
    }

    public XBUndoHandler getUndoHandler() {
        return treePanel.getUndoHandler();
    }

    public void printFile() {
        throw new UnsupportedOperationException("Not supported yet.");
        // textPanel.printFile();
    }

    public void setShowPropertiesPanel(boolean showPropertiesPanel) {
//        if (this.showPropertiesPanel != showPropertiesPanel) {
//            if (showPropertiesPanel) {
//                viewSplitPane.setLeftComponent(mainTabbedPane);
//                viewSplitPane.setRightComponent(propertyPanel);
//                mainSplitPane.setRightComponent(viewSplitPane);
//            } else {
//                mainSplitPane.setRightComponent(mainTabbedPane);
//            }
//
//            this.showPropertiesPanel = showPropertiesPanel;
//        }
    }

//    public ActivePanelActionHandling getActivePanel() {
//        int selectedIndex = mainTabbedPane.getSelectedIndex();
//        return (ActivePanelActionHandling) getPanel(selectedIndex);
//    }
    public boolean isShowPropertiesPanel() {
        return showPropertiesPanel;
    }

    public XBPluginRepository getPluginRepository() {
        return pluginRepository;
    }

    public void setPluginRepository(XBPluginRepository pluginRepository) {
        this.pluginRepository = pluginRepository;
        propertyPanel.setPluginRepository(pluginRepository);
    }

    public void setPropertyChangeListener(PropertyChangeListener propertyChangeListener) {
        // this.propertyChangeListener = propertyChangeListener;
        treePanel.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
            if (propertyChangeListener != null) {
                propertyChangeListener.propertyChange(evt);
            }
        });

        treePanel.addTreeSelectionListener((TreeSelectionEvent e) -> {
            if (propertyPanel.isEnabled()) {
                propertyPanel.setActiveNode(treePanel.getSelectedItem());
            }
        });

        super.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if (propertyChangeListener != null) {
                propertyChangeListener.propertyChange(evt);
            }
        });

    }

//    public boolean updateActionStatus(Component component) {
//        switch (mode) {
//            case VIEW:
////                return treePanel.updateActionStatus(component);
//            case TEXT: {
//                return false;
//            }
//            case BINARY: {
//                return false;
//            }
//        }
//
//        return false;
//    }
//
//    public void releaseActionStatus() {
//        switch (mode) {
//            case VIEW: {
////                treePanel.releaseActionStatus();
//                break;
//            }
//        }
//    }
//
//    public boolean performAction(String eventName, ActionEvent event) {
//        switch (mode) {
//            case VIEW:
////                return treePanel.performAction(eventName, event);
//        }
//
//        return false;
//    }
    public JPopupMenu getPopupMenu() {
        return popupMenu;
    }

    public void setPopupMenu(JPopupMenu popupMenu) {
        this.popupMenu = popupMenu;
        treePanel.setPopupMenu(popupMenu);
        // textPanel.setPopupMenu(popupMenu);
    }

    public void setMainDoc(XBTTreeDocument mainDoc) {
        treePanel.setMainDoc(mainDoc);
    }
}
