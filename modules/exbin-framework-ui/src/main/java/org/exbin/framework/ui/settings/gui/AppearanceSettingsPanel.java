/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.ui.settings.gui;

import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.framework.App;
import org.exbin.framework.context.api.ApplicationContextProvider;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.utils.ComponentResourceProvider;
import org.exbin.framework.ui.settings.AppearanceOptions;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;
import org.exbin.framework.options.settings.api.SettingsComponent;
import org.exbin.framework.options.settings.api.SettingsModifiedListener;
import org.exbin.framework.options.settings.api.SettingsOptionsProvider;

/**
 * Appearance settings panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class AppearanceSettingsPanel extends javax.swing.JPanel implements SettingsComponent, ComponentResourceProvider {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(AppearanceSettingsPanel.class);
    private SettingsModifiedListener settingsModifiedListener;

    public AppearanceSettingsPanel() {
        initComponents();
    }

    @Nonnull
    @Override
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    @Override
    public void loadFromOptions(SettingsOptionsProvider settingsOptionsProvider, @Nullable ApplicationContextProvider applicationContextProvider) {
        AppearanceOptions options = settingsOptionsProvider.getSettingsOptions(AppearanceOptions.class);
        showToolbarCheckBox.setSelected(options.isShowToolBar());
        showCaptionsCheckBox.setSelected(options.isShowToolBarCaptions());
        showStatusbarCheckBox.setSelected(options.isShowStatusBar());
    }

    @Override
    public void saveToOptions(SettingsOptionsProvider settingsOptionsProvider, @Nullable ApplicationContextProvider applicationContextProvider) {
        AppearanceOptions options = settingsOptionsProvider.getSettingsOptions(AppearanceOptions.class);
        options.setShowToolBar(showToolbarCheckBox.isSelected());
        options.setShowToolBarCaptions(showCaptionsCheckBox.isSelected());
        options.setShowStatusBar(showStatusbarCheckBox.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBarsOptionsPanel = new javax.swing.JPanel();
        showToolbarCheckBox = new javax.swing.JCheckBox();
        showCaptionsCheckBox = new javax.swing.JCheckBox();
        showStatusbarCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        showToolbarCheckBox.setSelected(true);
        showToolbarCheckBox.setText(resourceBundle.getString("showToolbarCheckBox.text")); // NOI18N
        showToolbarCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showToolbarCheckBoxjCheckBoxItemStateChanged(evt);
            }
        });

        showCaptionsCheckBox.setSelected(true);
        showCaptionsCheckBox.setText(resourceBundle.getString("showCaptionsCheckBox.text")); // NOI18N
        showCaptionsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showCaptionsCheckBoxjCheckBoxItemStateChanged(evt);
            }
        });

        showStatusbarCheckBox.setSelected(true);
        showStatusbarCheckBox.setText(resourceBundle.getString("showStatusbarCheckBox.text")); // NOI18N
        showStatusbarCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showStatusbarCheckBoxjCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout toolBarsOptionsPanelLayout = new javax.swing.GroupLayout(toolBarsOptionsPanel);
        toolBarsOptionsPanel.setLayout(toolBarsOptionsPanelLayout);
        toolBarsOptionsPanelLayout.setHorizontalGroup(
            toolBarsOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, toolBarsOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toolBarsOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showCaptionsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showStatusbarCheckBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showToolbarCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        toolBarsOptionsPanelLayout.setVerticalGroup(
            toolBarsOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolBarsOptionsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showToolbarCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showCaptionsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showStatusbarCheckBox))
        );

        add(toolBarsOptionsPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void showToolbarCheckBoxjCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showToolbarCheckBoxjCheckBoxItemStateChanged
        notifyModified();
    }//GEN-LAST:event_showToolbarCheckBoxjCheckBoxItemStateChanged

    private void showCaptionsCheckBoxjCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showCaptionsCheckBoxjCheckBoxItemStateChanged
        notifyModified();
    }//GEN-LAST:event_showCaptionsCheckBoxjCheckBoxItemStateChanged

    private void showStatusbarCheckBoxjCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showStatusbarCheckBoxjCheckBoxItemStateChanged
        notifyModified();
    }//GEN-LAST:event_showStatusbarCheckBoxjCheckBoxItemStateChanged

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new AppearanceSettingsPanel());
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox showCaptionsCheckBox;
    private javax.swing.JCheckBox showStatusbarCheckBox;
    private javax.swing.JCheckBox showToolbarCheckBox;
    private javax.swing.JPanel toolBarsOptionsPanel;
    // End of variables declaration//GEN-END:variables

    private void notifyModified() {
        if (settingsModifiedListener != null) {
            settingsModifiedListener.wasModified();
        }
    }

    @Override
    public void setSettingsModifiedListener(SettingsModifiedListener listener) {
        settingsModifiedListener = listener;
    }
}
